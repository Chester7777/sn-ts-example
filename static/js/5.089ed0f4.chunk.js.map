{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessagesForm","messagesAnchorRef","useRef","messages","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","userId","ref","React","memo","width","src","photo","userName","setMessage","onChange","value","disabled","onClick","sendMessages","ChatPage"],"mappings":"0UAcaA,EAAiB,WAC1B,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAA4BA,EAAMC,KAAKH,UAUlE,OARAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAGI,gCACS,UAAXN,GAAsB,+EACvB,qCACI,cAACO,EAAD,IACA,cAACC,EAAD,WAICD,EAAqB,WAC9B,IAAME,EAAoBC,iBAAuB,MAC3CC,EAAWV,aAAY,SAACC,GAAD,OAA4BA,EAAMC,KAAKQ,YACpE,EAAwCC,oBAAkB,GAA1D,mBAAOC,EAAP,KAAqBC,EAArB,KAkBA,OANAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACN,IAEG,sBAAKO,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAhBnC,SAACC,GACnB,IAAIC,EAAUD,EAAEE,cACZC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWjC,UACFH,EAASmB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAwBC,QAASH,GAAnBA,EAAEI,WAC5C,qBAAKC,IAAK3B,QAGLwB,EAAqDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAEvE,OAAO,gCACH,qBAAKhB,MAAO,CAACqB,MAAO,QAASC,IAAKN,EAAQO,QADvC,IACgD,4BAAIP,EAAQQ,WAC/D,uBACCR,EAAQA,QACT,6BAIC1B,EAA4B,WACrC,MAA8BI,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBS,EAAhB,KACM3C,EAASC,aAAY,SAACC,GAAD,OAA4BA,EAAMC,KAAKH,UAC5DF,EAAWC,cAUjB,OAAO,gCACH,8BACI,0BAAU6C,SAAU,SAACtB,GAAD,OAAOqB,EAAWrB,EAAEE,cAAcqB,QAAQA,MAAOX,MAEzE,8BACI,wBAAQY,SAAqB,UAAX9C,EAAoB+C,QAbnB,WAClBb,IAGLpC,EAASkD,YAAad,IACtBS,EAAW,MAQP,wBAMGM,UAvFY,WAEvB,OAAO,8BACH,cAACpD,EAAD","file":"static/js/5.089ed0f4.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../API/ChatAPI\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessages, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nexport const Chat: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const status = useSelector((state: AllAppStateType) => state.chat.status);\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, []);\r\n\r\n\r\n    return <div>\r\n        {status === \"error\" && <div>Some error occurred. Please refresh the page</div>}\r\n        <>\r\n            <Messages/>\r\n            <AddMessagesForm/>\r\n        </>\r\n    </div>\r\n}\r\nexport const Messages: React.FC = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const messages = useSelector((state: AllAppStateType) => state.chat.messages)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false);\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        var element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    //автоматическая перемотка скрола вниз при получении нового сообщения\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{height: \"400px\", overflowY: \"auto\"}} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.userId} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\nexport const Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n\r\n        return <div>\r\n            <img style={{width: \"30px\"}} src={message.photo}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    }\r\n)\r\nexport const AddMessagesForm: React.FC = () => {\r\n    const [message, setMessage] = useState(\"\");\r\n    const status = useSelector((state: AllAppStateType) => state.chat.status);\r\n    const dispatch = useDispatch();\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessages(message))\r\n        setMessage(\"\");\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== \"ready\"} onClick={sendMessageHandler}>send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default ChatPage;"],"sourceRoot":""}