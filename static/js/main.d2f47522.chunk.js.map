{"version":3,"sources":["redux/dialogsPage-reducer.ts","Components/Users/Users.module.css","Components/Navbar/Navbar.module.css","API/API.ts","reportWebVitals.ts","Components/Music/Music.tsx","Components/Navbar/Navbar.tsx","Components/News/news.tsx","Components/Setting/Setting.tsx","redux/users-reducer.ts","asseds/images/user.png","Components/Common/Paginator/Paginator.tsx","Components/Users/Users.tsx","redux/users-selectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","redux/auth-reducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/Redux-store.ts","Components/HOC/WithSuspense.tsx","App.tsx","index.tsx","asseds/images/Pinwheel.gif","Components/Common/Preloader/Preloader.tsx","Components/Common/FormsControls/FormControls.module.css","Components/Common/FormsControls/FormsControls.tsx","Components/Common/Paginator/Paginator.module.css","Utils/Validators/validators.ts","Components/Header/Header.module.css","redux/profilePage-reducer.ts"],"names":["ADD_MESSAGE","initialState","dialogs","id","name","messages","addMessagesActionCreator","newMessageText","type","dialogsPageReducer","state","action","body","module","exports","ResultCodesEnum","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","unfollow","delete","follow","post","profileAPI","getProfile","userId","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","loginAuth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Music","Navbar","props","className","s","nav","item","active","activeClassName","to","News","Setting","FOLLOW","UNFOLLOW","SET_USER","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","portionSize","usersReducer","map","u","followed","count","filter","followSuccess","unfollowSuccess","setCurrentPage","setIsFetching","setIsFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","Paginator","useSelector","usersPage","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","e","onPageChanged","Users","pageCount","src","photos","small","userPhoto","disabled","some","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getPortionSize","UsersContainer","this","Preloader","React","Component","compose","connect","bind","page","items","totalCount","Header","header","loginBlock","isAuth","logout","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","WithUrlDataContainerComponent","withRouter","auth","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","validate","required","placeholder","error","formSummaryError","message","length","stopSubmit","_error","formData","friends","age","sidebarReducer","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","profilePage","profilePageReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","WithSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","AppContainer","promise","Promise","all","MainAppContainer","StrictMode","ReactDOM","document","getElementById","preloader","FormControl","input","meta","children","hasError","touched","formControl","Textarea","restProps","value","maxLengthCreator","maxLength","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","posts","likes","profile","addPostsActionCreator","newPostText","setStatus","getUserProfile","newPost","postId"],"mappings":"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","file":"static/js/main.d2f47522.chunk.js","sourcesContent":["const ADD_MESSAGE = \"ADD-MESSAGE\";\r\n// const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    // newMessageText: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    messages: string\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dima\"},\r\n        {id: 2, name: \"Jeny\"},\r\n        {id: 3, name: \"Oly\"},\r\n        {id: 4, name: \"Milana\"},\r\n        {id: 5, name: \"Katy\"},\r\n        {id: 6, name: \"Andrey\"},\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, messages: \"Hi\"},\r\n        {id: 2, messages: \"How is your It-kamasutra?\"},\r\n        {id: 3, messages: \"Yo\"},\r\n    ] as Array<MessagesType>\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst dialogsPageReducer = (state: initialStateType = initialState, action: DialogsPageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let body = action.newMessageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, messages: body}]\r\n        }\r\n        // case UPDATE_NEW_MESSAGE_TEXT:\r\n        //     return {\r\n        //         ...state,\r\n        //         newMessageText: action.newMessage\r\n        // }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const addMessagesActionCreator = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)\r\n// export const onMessageChangeActionCreator = (newMessage: string) => ({\r\n//     type: UPDATE_NEW_MESSAGE_TEXT,\r\n//     newMessage: newMessage\r\n// } as const)\r\n\r\nexport default dialogsPageReducer;\r\n\r\ntype DialogsPageActionType =\r\n\r\n    ReturnType<typeof addMessagesActionCreator>\r\n    // ReturnType<typeof onMessageChangeActionCreator>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__fXTtC\",\"selectedPage\":\"Users_selectedPage__2a3HY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3uRQR\",\"item\":\"Navbar_item__3yGGV\",\"active\":\"Navbar_active__2yhpY\"};","import axios from \"axios\";\r\nimport {GetTasksResponseType} from \"../Components/Users/UsersContainer\";\r\nimport {PostPropsType} from \"../redux/auth-reducer\";\r\nimport {ProfilePropsType, StatusProfileType} from \"../redux/profilePage-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"0b171657-160a-4f70-93fb-80213f27dfbf\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetTasksResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<LoginAuthResponseType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<PostPropsType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    }\r\n}\r\n//\r\ntype GetProfileResponseType = {\r\n    userId: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<StatusProfileType>(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: string\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type LoginAuthResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`);\r\n    },\r\n    login(email: string, password: number, rememberMe: boolean) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    loginAuth() {\r\n        return instance.delete<LoginAuthResponseType>(`auth/login`)\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\n\r\nconst  Music = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\nimport Friend from \"../Sidebar/friend\";\r\nimport {FriendsType} from \"../../redux/store\";\r\n\r\ntype NavbarType = {\r\n    //friends: Array<FriendsType>\r\n}\r\n\r\nconst Navbar = (props: NavbarType) => {\r\n\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.active}`}>\r\n\r\n{/*меняет url в браузере без перезакрузки страницы*/}\r\n                <NavLink activeClassName={s.active} to=\"/profile\">Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/dialogs\">Massages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/users\">Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/news\">News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n            <div>\r\n                {/*<Friend friends={props.friends}/>*/}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\n\r\n\r\n\r\nfunction News () {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\n\r\n\r\nconst Setting = () => {\r\n    return(\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting;","import {usersAPI} from \"../API/API\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USER = \"SET_USER\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n}\r\n\r\nexport type UsersType = {\r\n    \"name\": string\r\n    \"id\": number\r\n    \"uniqueUrlName\": string | null\r\n    \"photos\": {\r\n        \"small\": string | null\r\n        \"large\": string | null\r\n    },\r\n    \"status\": string | null\r\n    \"followed\": boolean\r\n}\r\n\r\n\r\ntype CountryType = {\r\n    country: string\r\n    citi: string\r\n}\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n    portionSize: 10\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //users: [...state.users],\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USER: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USER, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const setIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching, userId\r\n} as const)\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setIsFollowingProgress>\r\n\r\n\r\nexport type GetUsersThunkCreatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n}\r\n\r\n// type ThunkType = ThunkAction<void, AllAppStateType, unknown, ActionType>\r\nexport const requestUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\n\r\nlet followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(setIsFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(setIsFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\n//refactoring ублирования кода\r\n// export const follow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.follow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(followSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }\r\n// export const unfollow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.unfollow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(unfollowSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }","export default __webpack_public_path__ + \"static/media/user.c6ac9673.png\";","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../../redux/Redux-store\";\r\n\r\ntype PaginatorType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\n\r\n\r\nexport let Paginator = (props: PaginatorType) => {\r\n\r\n    const portionSize = useSelector<AllAppStateType, number>(state => state.usersPage.portionSize);\r\n\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / portionSize);\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.pageSize);\r\n    let [portionNumber, setPortionNumber] = useState<number>(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p) => {\r\n                        return <span className={cn({[styles.selectedPage]: props.currentPage === p}, styles.pageNumber)}\r\n                                     key={p}\r\n                                     onClick={(e) => {\r\n                                         props.onPageChanged(p)\r\n                                     }}>{p}</span>\r\n                    })\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>PREV</button>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport userPhoto from \"../../asseds/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {Paginator} from \"../Common/Paginator/Paginator\";\r\n\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    portionSize: number\r\n    // setIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<number>\r\n    // resultCode: number\r\n}\r\ntype PostPropsType = {\r\n    id: number\r\n    resultCode: number\r\n}\r\n\r\n\r\nlet Users = (props: PropsType) => {\r\n    let pageCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return <div>\r\n        <Paginator currentPage={props.currentPage}\r\n        onPageChanged={props.onPageChanged}\r\n        totalItemsCount={props.totalItemsCount}\r\n        pageSize={props.portionSize}\r\n        portionSize={props.portionSize}/>\r\n        {/*<div>*/}\r\n        {/*    {pages.map(p => {*/}\r\n        {/*        return <span*/}\r\n        {/*            key={p}*/}\r\n        {/*            className={props.currentPage === p ? s.selectedPage : \"\"}*/}\r\n        {/*            onClick={(e) => props.onPageChanged(p)}*/}\r\n        {/*        >{p}</span>*/}\r\n        {/*    })}*/}\r\n        {/*</div>*/}\r\n        {/*использовал до componentDidMount*/}\r\n        {/*<button onClick={this.props.getUsers}>get users</button>*/}\r\n        {\r\n            props.users.map((u: UsersType) => {\r\n                    return <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={\"./profile/\" + u.id}>\r\n                            <img src={u.photos.small != null ? u.photos.small : userPhoto} className={s.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.unfollow(u.id)\r\n\r\n                                }}>unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.follow(u.id)\r\n                                }}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                        <span>\r\n                        <span>\r\n                            <div>\r\n                                {u.name}\r\n                            </div>\r\n                            <div>\r\n                                {u.status}\r\n                            </div>\r\n                        </span>\r\n                        <span>\r\n                            <div>\r\n                                {\"u.location.country\"}\r\n                            </div>\r\n                            <div>\r\n                                {\"u.location.citi\"}\r\n                            </div>\r\n                        </span>\r\n                    </span>\r\n                    </div>\r\n                }\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {AllAppStateType} from \"./Redux-store\";\r\n\r\nexport const getUsers = (state: AllAppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getPageSize = (state: AllAppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AllAppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AllAppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AllAppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AllAppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getPortionSize = (state: AllAppStateType) => {\r\n    return state.usersPage.portionSize;\r\n}","import {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {\r\n    follow,\r\n    requestUsersThunkCreator,\r\n    setCurrentPage,\r\n    setIsFollowingProgress,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getPortionSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    // setUsers: (users: Array<UsersType>) => void\r\n    // setTotalUsersCount: (totalCount: number) => void\r\n    // setIsFetching: (isFetching: boolean) => void\r\n\r\n\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & mapDispatchToPropsType;\r\n\r\nexport type GetTasksResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n// export type OnPageChangedType = {\r\n//     onPageChanged: (pageNumber: number) => void\r\n// }\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    //подключаем thunkCreator (санки)\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //         this.props.setTotalUsersCount(data.totalCount)\r\n    //     })\r\n    // }\r\n\r\n    //подключаем thunkCreator (санки)\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n    // onPageChanged = (pageNumber: number) => {\r\n    //     this.props.setCurrentPage(pageNumber);\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            {/*<Paginator />*/}\r\n            <Users\r\n                totalItemsCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                portionSize={this.props.portionSize}\r\n                // setIsFollowingProgress={this.props.setIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n//refactoring\r\n// let mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionSize: getPortionSize(state)\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n//\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UsersType>) => {\r\n//             dispatch(setUserAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//         setIsFetching: (isFetching: boolean) => {\r\n//             dispatch(setIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        setIsFollowingProgress,\r\n        getUsers: requestUsersThunkCreator\r\n    })\r\n)(UsersContainer);\r\n// let withRedirectComponent = withAuthRedirect(UsersContainer)\r\n//\r\n// export default connect(mapStateToProps,\r\n//     {\r\n//         follow,\r\n//         unfollow,\r\n//         // setUsers,\r\n//         setCurrentPage,\r\n//         // setTotalUsersCount,\r\n//         // setIsFetching,\r\n//         setIsFollowingProgress,\r\n//         getUsers: getUsersThunkCreator\r\n//     })(withRedirectComponent);","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PropsType} from \"./HeaderContainer\";\r\n\r\n\r\nconst Header = (props: PropsType) => {\r\n    return <header className={s.header}>\r\n        <img\r\n            src=\"https://placeitmarketing.s3.amazonaws.com/public/custompages/logo-maker/Esports-Logo-Maker.png\"/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ?\r\n                <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={\"/login\"}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../API/API\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst SET_USER_DATA = \"samurai_network/auth/SET_USER_DATA\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    userId: string\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nexport type PostPropsType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    resultCode?: number\r\n    messages?: Array<string>\r\n}\r\n// export type InitialStateType = {\r\n//     data: DataPropsType\r\n//     resultCode?: number\r\n//     messages?: Array<string>\r\n// }\r\n//\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    userId: '',\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: SetAuthUserDataAction): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userId: action.payload.userId,\r\n                email: action.payload.email,\r\n                login: action.payload.login,\r\n                isAuth: action.payload.isAuth\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataAction = {\r\n    type: typeof SET_USER_DATA\r\n    payload: InitialStateType\r\n}\r\n\r\nexport const setAuthUserData = (userId: string, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataAction => ({\r\n    type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email: string, password: number, rememberMe: boolean = false) => async (dispatch: ThunkDispatch<AllAppStateType, unknown, SetAuthUserDataAction | FormAction>) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.loginAuth();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData('', null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport Header from \"./Header\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout:  () => void\r\n}\r\n\r\n\r\nexport type PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType\r\n\r\ntype DataPropsType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\ntype PostPropsType = {\r\n    data: DataPropsType\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    //перенесли в APP\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserData()\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n\r\n                <Header {...this.props} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n//передает компаненте данные из URL\r\n\r\nlet WithUrlDataContainerComponent = withRouter(HeaderContainer);\r\n\r\n\r\n//передает в компаненту данные из store\r\nexport default connect<MapStatePropsType,any,any,any>(mapStateToProps, {logout})(WithUrlDataContainerComponent);","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/Validators/validators\";\r\nimport s from \"./../Common/FormsControls/FormControls.module.css\"\r\n\r\nexport type LoginFormType = {\r\n    email: string\r\n    password: number\r\n    rememberMe: boolean\r\n}\r\nexport const LoginForm = (props: InjectedFormProps<LoginFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"email\"} placeholder={\"Email\"}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"password\"} type={\"password\"}\r\n                       placeholder={\"Password\"}/>\r\n\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\r\n\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const LoginReduxForm = reduxForm<LoginFormType>({form: \"login\"})(LoginForm)\r\n","import React from \"react\";\r\nimport {LoginFormType, LoginReduxForm} from \"./LoginForm\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: number, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    //isAuth можно и так достать\r\n    // const isAuth = useSelector<AllAppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const onSubmit = (formData: LoginFormType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AllAppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","export type FriendsType = {\r\n    id: number\r\n    age: number\r\n    name: string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    friends: [\r\n        {name: \"Andrew\", age: 32, id: 1},\r\n        {name: \"Sasha\", age: 33, id: 2},\r\n        {name: \"Sveta\", age: 29, id: 3},\r\n    ] as Array<FriendsType>,\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type AppActionType = InitializedSuccessType\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type InitializedSuccessType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): InitializedSuccessType => ({type: INITIALIZED_SUCCESS} as const)\r\n\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AllAppStateType, unknown, AppActionType>) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n\r\n}\r\n\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore, Store} from \"redux\";\r\nimport profilePageReducer from \"./profilePage-reducer\";\r\nimport dialogsPageReducer from \"./dialogsPage-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\nimport {exists} from \"fs\";\r\n\r\n// функция combineReducers склеивает reducer, тоесть создает state\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n// расширение (REDUX_DEVTOOLS_EXTENSION)\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// или\r\n// const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// расширение (REDUX_DEVTOOLS_EXTENSION)\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\n// функция создает store\r\n// let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AllAppStateType = ReturnType<typeof reducers>\r\nexport type AppStoreType = typeof store\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\n\r\n\r\nexport let WithSuspense = (Component: any) => (props: RouteComponentProps<{}, any, unknown>) => {\r\n    return (\r\n        <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    )\r\n};","import React, {lazy} from \"react\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport \"./App.css\";\nimport Music from \"./Components/Music/Music\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport News from \"./Components/News/news\";\nimport Setting from \"./Components/Setting/Setting\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\"\nimport Login from \"./Components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport store, {AllAppStateType} from \"./redux/Redux-store\";\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {WithSuspense} from \"./Components/HOC/WithSuspense\";\n\nconst DialogsContainer = lazy(() => import(\"./Components/Dialogs/DialogsContainer\"));\nconst ProfileContainer = lazy(() => import(\"./Components/Profile/ProfileContainer\"));\n\n\ntype AppType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <BrowserRouter>\n                <div className=\"app-wrapper\">\n                    <HeaderContainer/>\n                    <Navbar/>\n                    <div className=\"app-wrapper-content\">\n                        {/*Route - реактовская компонента, которая при совпадении с ее path позовет колбэк находящийся в ней*/}\n                        <Route path=\"/dialogs\" render={WithSuspense(DialogsContainer)}/>\n                        <Route path=\"/profile/:userId?\" render={WithSuspense(ProfileContainer)}/>\n                        <Route path=\"/news\" render={() => <News/>}/>\n                        <Route path=\"/music\" render={() => <Music/>}/>\n                        <Route path=\"/settings\" render={() => <Setting/>}/>\n                        <Route path=\"/users\" render={() => <UsersContainer/>}/>\n                        <Route path=\"/login\" render={() => <Login/>}/>\n                    </div>\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AllAppStateType) => ({\n    initialized: state.app.initialized\n})\n// const mapDispatchToProps = (state: AllAppStateType) => ({\n//     getAuthUserData:\n// })\n\nlet AppContainer = compose(\n    connect(mapStateToProps, {initializeApp}))(App);\n\nexport let MainAppContainer = () => {\n\n    // обернули APP что бы наши страницы переключались без перезагрузки\n    return <React.StrictMode>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </React.StrictMode>\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {MainAppContainer} from \"./App\";\n\nReactDOM.render(<MainAppContainer />, document.getElementById(\"root\"));\n\n\n// эта компонента отрисовывает мое приложение\n// export let rerenderEntireTree = () => {\n//\n// }\n// rerenderEntireTree();\n\n// store.subscribe(rerenderEntireTree);\n\nreportWebVitals();\n","export default __webpack_public_path__ + \"static/media/Pinwheel.21e3df13.gif\";","import React from \"react\";\r\nimport preloader from \"../../../asseds/images/Pinwheel.gif\";\r\n\r\n\r\nlet Preloader = () => {\r\n\r\n    return <>\r\n         <img src={preloader}/>\r\n    </>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3yUwP\",\"error\":\"FormControls_error__3zLLX\",\"formSummaryError\":\"FormControls_formSummaryError__1SIqZ\"};","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    input: any\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({input, meta, children, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1_gcO\",\"pageNumber\":\"Paginator_pageNumber__1xOwu\",\"selectedPage\":\"Paginator_selectedPage__To8FU\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2LuNL\",\"loginBlock\":\"Header_loginBlock__3vD8E\"};","import {profileAPI} from \"../API/API\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n}\r\ntype ContactsType = {\r\n    facebook: string,\r\n    website: null,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: null,\r\n    github: string,\r\n    mainLink: null\r\n}\r\ntype PhotosType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type ProfilePropsType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type StatusProfileType = {\r\n    resultCode: number,\r\n    message: string,\r\n    data: {\r\n        resultCode: number\r\n        messages: string[],\r\n        data: {}\r\n    }\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hey, why nobody love me\", likes: \"15\"},\r\n        {id: 2, message: \"It`s our new program! Hey\", likes: \"20\"},\r\n    ] as Array<PostsType>,\r\n    profile: {} as ProfilePropsType,\r\n    status: \"\"\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst profilePageReducer = (state: InitialStateType = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likes: \"0\"\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            };\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport const addPostsActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const);\r\nexport const deletePostsActionCreator = (postId: number) => ({type: DELETE_POST, postId} as const);\r\nexport const setUserProfile = (profile: ProfilePropsType) => ({type: SET_USER_PROFILE, profile} as const);\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const);\r\n\r\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch<ProfileActionType>) => {\r\n    let response = await profileAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n}\r\nexport const getStatus = (userId: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\n\r\ntype ProfileActionType =\r\n    ReturnType<typeof addPostsActionCreator> |\r\n    ReturnType<typeof deletePostsActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus>\r\n\r\nexport default profilePageReducer;"],"sourceRoot":""}