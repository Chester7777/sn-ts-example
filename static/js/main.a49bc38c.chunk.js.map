{"version":3,"sources":["Components/Header/Header.module.css","API/ProfileAPI.ts","redux/profilePage-reducer.ts","asseds/images/user.png","redux/dialogsPage-reducer.ts","Components/Users/Users.module.css","API/API.ts","Components/Navbar/Navbar.module.css","reportWebVitals.ts","Components/Music/Music.tsx","Components/Navbar/Navbar.tsx","Components/News/news.tsx","Components/Setting/Setting.tsx","API/UsersAPI.ts","redux/users-reducer.ts","Components/Common/Paginator/Paginator.tsx","Components/Users/UsersSearchForm.tsx","Components/Users/Users.tsx","redux/users-selectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","API/SecurityAPI.ts","API/AuthAPI.ts","redux/auth-reducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","redux/sidebar-reducer.ts","redux/app-reducer.ts","redux/Redux-store.ts","Components/HOC/WithSuspense.tsx","App.tsx","index.tsx","Components/Common/FormsControls/FormsControls.tsx","asseds/images/Pinwheel.gif","Components/Common/Preloader/Preloader.tsx","Components/Common/FormsControls/FormControls.module.css","Utils/Validators/validators.ts","Components/Common/Paginator/Paginator.module.css"],"names":["module","exports","profileAPI","userId","instance","get","status","put","filePhoto","formData","FormData","append","headers","profile","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likes","addPostsActionCreator","newPostText","type","setStatus","getUserProfile","dispatch","a","response","data","getStatus","updateStatus","resultCode","savePhoto","file","photos","saveProfile","getState","auth","stopSubmit","_error","messages","Promise","reject","profilePageReducer","state","action","newPost","filter","p","postId","ADD_MESSAGE","dialogs","name","addMessagesActionCreator","newMessageText","dialogsPageReducer","body","ResultCodesEnum","axios","create","baseURL","withCredentials","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Music","Navbar","props","className","s","nav","item","active","activeClassName","to","News","Setting","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","delete","follow","post","FOLLOW","UNFOLLOW","SET_USER","SET_CURRENT_PAGE","SET_FILTER","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","portionSize","usersReducer","map","u","followed","payload","count","followSuccess","unfollowSuccess","setCurrentPage","setFilter","setIsFetching","setIsFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","Paginator","useSelector","usersPage","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","cn","selectedPage","pageNumber","e","onPageChanged","usersSearchFormValidate","values","UsersSearchForm","React","memo","initialValues","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","disabled","Users","pageCount","src","small","userPhoto","some","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getPortionSize","getUsersFilter","UsersContainer","this","Preloader","Component","compose","connect","bind","error","page","items","totalCount","Header","header","loginBlock","isAuth","login","logout","securityAPI","AuthAPI","email","password","rememberMe","captcha","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","captchaUrl","setAuthUserData","getCaptchaUrlAC","getAuthUserData","getCaptchaUrl","url","authReducer","HeaderContainer","WithUrlDataContainerComponent","withRouter","LoginReduxForm","reduxForm","form","handleSubmit","Field","component","Input","required","placeholder","createField","formSummaryError","length","friends","age","sidebarReducer","initialized","appReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","WithSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","promiseRejectionEvent","alert","initializeApp","addEventListener","catchAllUnhandledErrors","removeEventListener","exact","path","render","AppContainer","promise","all","MainAppContainer","StrictMode","ReactDOM","document","getElementById","FormControl","input","meta","children","hasError","touched","formControl","Textarea","restProps","validators","text","preloader","maxLengthCreator","maxLength"],"mappings":"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","file":"static/js/main.a49bc38c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2LuNL\",\"loginBlock\":\"Header_loginBlock__3vD8E\"};","import {PhotosType, ProfilePropsType} from \"../redux/profilePage-reducer\";\r\nimport {APIResponseType, instance, LoginAuthResponseType} from \"./API\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfilePropsType>(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<StatusProfileType>(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(filePhoto: string) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", filePhoto)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfilePropsType) {\r\n        return instance.put<LoginAuthResponseType>(`profile`, profile)\r\n    }\r\n}\r\n\r\nexport type SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n};\r\n\r\nexport type StatusProfileType = {\r\n    resultCode: number,\r\n    message: string,\r\n    data: {\r\n        resultCode: number\r\n        messages: string[],\r\n        data: {}\r\n    }\r\n};\r\n\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType} from \"./Redux-store\";\r\nimport {profileAPI} from \"../API/ProfileAPI\";\r\n\r\n\r\nconst ADD_POST = \"sn/PROFILE/ADD-POST\";\r\nconst DELETE_POST = \"sn/PROFILE/DELETE_POST\";\r\nconst SET_USER_PROFILE = \"sn/PROFILE/SET_USER_PROFILE\";\r\nconst SET_STATUS = \"sn/PROFILE/SET_STATUS\";\r\nconst SAVE_PHOTO_SUCCESS = \"sn/PROFILE/SAVE_PHOTO_SUCCESS\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n};\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: null,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: null,\r\n    github: string,\r\n    mainLink: null\r\n};\r\nexport type PhotosType = {\r\n    small: string,\r\n    large: string\r\n};\r\nexport type ProfilePropsType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n};\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hey, why nobody love me\", likes: \"15\"},\r\n        {id: 2, message: \"It`s our new program! Hey\", likes: \"20\"},\r\n    ] as Array<PostsType>,\r\n    profile: null as ProfilePropsType | null,\r\n    status: \"\"\r\n};\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst profilePageReducer = (state = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likes: \"0\"\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            };\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: state.profile && {...state.profile, photos: action.photos}\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport const addPostsActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const);\r\nexport const deletePostsActionCreator = (postId: number) => ({type: DELETE_POST, postId} as const);\r\nexport const setUserProfile = (profile: ProfilePropsType) => ({type: SET_USER_PROFILE, profile} as const);\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const);\r\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos} as const);\r\n\r\ntype ThunkType = BaseThunkType<ProfileActionType | FormAction>;\r\n\r\nexport const getUserProfile = (userId: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getProfile(userId);\r\n        dispatch(setUserProfile(response.data));\r\n    }\r\nexport const getStatus = (userId: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userId);\r\n        dispatch(setStatus(response.data))\r\n    }\r\nexport const updateStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\nexport const savePhoto = (file: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.savePhoto(file);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(response.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const saveProfile = (profile: ProfilePropsType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        const userId = getState().auth.userId\r\n        let response = await profileAPI.saveProfile(profile);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n            return Promise.reject(response.data.messages[0])\r\n        }\r\n    }\r\n\r\n\r\nexport type ProfileActionType =\r\n    ReturnType<typeof addPostsActionCreator> |\r\n    ReturnType<typeof deletePostsActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof savePhotoSuccess>\r\n\r\nexport default profilePageReducer;","export default __webpack_public_path__ + \"static/media/user.c6ac9673.png\";","const ADD_MESSAGE = \"sn/DIALOGS/ADD-MESSAGE\";\r\n// const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    // newMessageText: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    messages: string\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dima\"},\r\n        {id: 2, name: \"Jeny\"},\r\n        {id: 3, name: \"Oly\"},\r\n        {id: 4, name: \"Milana\"},\r\n        {id: 5, name: \"Katy\"},\r\n        {id: 6, name: \"Andrey\"},\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, messages: \"Hi\"},\r\n        {id: 2, messages: \"How is your It-kamasutra?\"},\r\n        {id: 3, messages: \"Yo\"},\r\n    ] as Array<MessagesType>\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst dialogsPageReducer = (state = initialState, action: DialogsPageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let body = action.newMessageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, messages: body}]\r\n            }\r\n        // case UPDATE_NEW_MESSAGE_TEXT:\r\n        //     return {\r\n        //         ...state,\r\n        //         newMessageText: action.newMessage\r\n        // }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const addMessagesActionCreator = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)\r\n// export const onMessageChangeActionCreator = (newMessage: string) => ({\r\n//     type: UPDATE_NEW_MESSAGE_TEXT,\r\n//     newMessage: newMessage\r\n// } as const)\r\n\r\nexport default dialogsPageReducer;\r\n\r\ntype DialogsPageActionType = ReturnType<typeof addMessagesActionCreator>\r\n// ReturnType<typeof onMessageChangeActionCreator>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__fXTtC\",\"selectedPage\":\"Users_selectedPage__2a3HY\"};","import axios from \"axios\";\r\nimport {UsersType} from \"../redux/users-reducer\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"0b171657-160a-4f70-93fb-80213f27dfbf\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\nexport type LoginAuthResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type MeResponseType = {\r\n    data: {\r\n        id: string\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type LoginResponseType = {\r\n    data: {\r\n        userId: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type GetProfileResponseType = {\r\n    userId: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3uRQR\",\"item\":\"Navbar_item__3yGGV\",\"active\":\"Navbar_active__2yhpY\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\n\r\nconst  Music = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\n\r\n\r\nconst Navbar: React.FC = (props) => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.active}`}>\r\n\r\n                {/*меняет url в браузере без перезакрузки страницы*/}\r\n                <NavLink activeClassName={s.active} to=\"/profile\">Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/dialogs\">Massages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/users\">Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/news\">News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n            <div>\r\n                {/*<Friend friends={props.friends}/>*/}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\n\r\n\r\n\r\nfunction News () {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\n\r\n\r\nconst Setting = () => {\r\n    return(\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting;","import {GetTasksResponseType} from \"../Components/Users/UsersContainer\";\r\nimport {instance, LoginAuthResponseType} from \"./API\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get<GetTasksResponseType>(\r\n            `users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`)\r\n        )\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<LoginAuthResponseType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<any>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    }\r\n}\r\n\r\n// export type FollowPostPropsType = {\r\n//     data: {},\r\n//     messages: [],\r\n//     resultCode: number\r\n// }","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../API/UsersAPI\";\r\nimport {BaseThunkType} from \"./Redux-store\";\r\n\r\n\r\nconst FOLLOW = \"SN/USERS/FOLLOW\";\r\nconst UNFOLLOW = \"SN/USERS/UNFOLLOW\";\r\nconst SET_USER = \"SN/USERS/SET_USER\";\r\nconst SET_CURRENT_PAGE = \"SN/USERS/SET_CURRENT_PAGE\";\r\nconst SET_FILTER = \"SN/USERS/SET_FILTER\";\r\nconst SET_TOTAL_COUNT = \"SN/USERS/SET_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"SN/USERS/TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n    filter: {\r\n        term: string\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\nexport type UsersType = {\r\n    \"name\": string\r\n    \"id\": number\r\n    \"uniqueUrlName\": string | null\r\n    \"photos\": {\r\n        \"small\": string | null\r\n        \"large\": string | null\r\n    },\r\n    \"status\": string | null\r\n    \"followed\": boolean\r\n}\r\n\r\n\r\ntype CountryType = {\r\n    country: string\r\n    citi: string\r\n}\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nexport let initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n    portionSize: 10,\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //users: [...state.users],\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USER: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USER, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setFilter = (filter: FilterType) => ({type: SET_FILTER, payload: filter} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const setIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching, userId\r\n} as const)\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setFilter> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setIsFollowingProgress>\r\n\r\nexport type FilterType = typeof initialState.filter;\r\n\r\n\r\nexport type GetUsersThunkCreatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n}\r\n\r\n// type ThunkType = ThunkAction<void, AllAppStateType, unknown, ActionType>\r\nexport const requestUsersThunkCreator = (page: number, pageSize: number, filter: FilterType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(setFilter(filter));\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\ntype ThunkType = BaseThunkType<UsersActionType>;\r\n\r\nlet followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: (userId: number) => Promise<any>, actionCreator: (userId: number) => UsersActionType) => {\r\n    dispatch(setIsFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(setIsFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n        } catch (reject) {\r\n            return reject.data.data.error\r\n        }\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\n//refactoring ублирования кода\r\n// export const follow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.follow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(followSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }\r\n// export const unfollow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.unfollow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(unfollowSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../../redux/Redux-store\";\r\n\r\ntype PaginatorType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\n\r\nexport let Paginator: React.FC<PaginatorType> = (props) => {\r\n\r\n    const portionSize = useSelector<AllAppStateType, number>(state => state.usersPage.portionSize);\r\n\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / portionSize);\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.pageSize);\r\n    let [portionNumber, setPortionNumber] = useState<number>(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p) => {\r\n                        return <span className={cn({[styles.selectedPage]: props.currentPage === p}, styles.pageNumber)}\r\n                                     key={p}\r\n                                     onClick={(e) => {\r\n                                         props.onPageChanged(p)\r\n                                     }}>{p}</span>\r\n                    })\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>PREV</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\n\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FormType = {\r\n    term: \"\"\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n            }\r\n\r\n            props.onFilterChanged(filter)\r\n            setSubmitting(false);\r\n        }\r\n\r\n        return <div>\r\n            <Formik\r\n                initialValues={{term: '', friend: \"null\"}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    }\r\n)","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {FilterType, UsersType} from \"../../redux/users-reducer\";\r\nimport userPhoto from \"../../asseds/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {Paginator} from \"../Common/Paginator/Paginator\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\n\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    onFilterChanged: (filter: FilterType) => void\r\n    users: Array<UsersType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    portionSize: number\r\n    followingInProgress: Array<number>\r\n}\r\ntype PostPropsType = {\r\n    id: number\r\n    resultCode: number\r\n}\r\n\r\n\r\nlet Users = (props: PropsType) => {\r\n\r\n    let pageCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return <div>\r\n        <UsersSearchForm onFilterChanged={props.onFilterChanged}/>\r\n        <Paginator currentPage={props.currentPage}\r\n                   onPageChanged={props.onPageChanged}\r\n                   totalItemsCount={props.totalItemsCount}\r\n                   pageSize={props.pageSize}\r\n                   portionSize={props.portionSize}/>\r\n        {/*<div>*/}\r\n        {/*    {pages.map(p => {*/}\r\n        {/*        return <span*/}\r\n        {/*            key={p}*/}\r\n        {/*            className={props.currentPage === p ? s.selectedPage : \"\"}*/}\r\n        {/*            onClick={(e) => props.onPageChanged(p)}*/}\r\n        {/*        >{p}</span>*/}\r\n        {/*    })}*/}\r\n        {/*</div>*/}\r\n        {/*использовал до componentDidMount*/}\r\n        {/*<button onClick={this.props.getUsers}>get users</button>*/}\r\n        {\r\n            props.users.map((u: UsersType) => {\r\n                    return <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={\"./profile/\" + u.id}>\r\n                            <img src={u.photos.small != null ? u.photos.small : userPhoto} className={s.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.unfollow(u.id)\r\n                                }}>unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.follow(u.id)\r\n                                }}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                        <span>\r\n                        <span>\r\n                            <div>\r\n                                {u.name}\r\n                            </div>\r\n                            <div>\r\n                                {u.status}\r\n                            </div>\r\n                        </span>\r\n                        <span>\r\n                            <div>\r\n                                {\"u.location.country\"}\r\n                            </div>\r\n                            <div>\r\n                                {\"u.location.citi\"}\r\n                            </div>\r\n                        </span>\r\n                    </span>\r\n                    </div>\r\n                }\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;\r\n","import {AllAppStateType} from \"./Redux-store\";\r\n\r\nexport const getUsers = (state: AllAppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getPageSize = (state: AllAppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AllAppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AllAppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AllAppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AllAppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getPortionSize = (state: AllAppStateType) => {\r\n    return state.usersPage.portionSize;\r\n}\r\nexport const getUsersFilter = (state: AllAppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {\r\n    FilterType,\r\n    follow,\r\n    requestUsersThunkCreator,\r\n    setCurrentPage,\r\n    setIsFollowingProgress,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getPortionSize,\r\n    getTotalUsersCount,\r\n    getUsers, getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n    filter: FilterType\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\r\n    // setUsers: (users: Array<UsersType>) => void\r\n    // setTotalUsersCount: (totalCount: number) => void\r\n    // setIsFetching: (isFetching: boolean) => void\r\n\r\n\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & mapDispatchToPropsType;\r\n\r\nexport type GetTasksResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n// export type OnPageChangedType = {\r\n//     onPageChanged: (pageNumber: number) => void\r\n// }\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    //подключаем thunkCreator (санки)\r\n    componentDidMount() {\r\n        const {currentPage, pageSize, filter} = this.props;\r\n        this.props.getUsers(currentPage, pageSize, filter);\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //         this.props.setTotalUsersCount(data.totalCount)\r\n    //     })\r\n    // }\r\n\r\n    //подключаем thunkCreator (санки)\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize, filter} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize, filter)\r\n    }\r\n    // onPageChanged = (pageNumber: number) => {\r\n    //     this.props.setCurrentPage(pageNumber);\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //     })\r\n    // }\r\n\r\n    onFilterChanged = (filter: FilterType) => {\r\n        const {pageSize} = this.props;\r\n        this.props.getUsers(1, pageSize, filter)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            {/*<Paginator />*/}\r\n            <Users\r\n                totalItemsCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                onFilterChanged={this.onFilterChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                portionSize={this.props.portionSize}\r\n                // setIsFollowingProgress={this.props.setIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n//refactoring\r\n// let mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionSize: getPortionSize(state),\r\n        filter: getUsersFilter(state)\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n//\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UsersType>) => {\r\n//             dispatch(setUserAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//         setIsFetching: (isFetching: boolean) => {\r\n//             dispatch(setIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        setIsFollowingProgress,\r\n        getUsers: requestUsersThunkCreator\r\n    })\r\n)(UsersContainer);\r\n// let withRedirectComponent = withAuthRedirect(UsersContainer)\r\n//\r\n// export default connect(mapStateToProps,\r\n//     {\r\n//         follow,\r\n//         unfollow,\r\n//         // setUsers,\r\n//         setCurrentPage,\r\n//         // setTotalUsersCount,\r\n//         // setIsFetching,\r\n//         setIsFollowingProgress,\r\n//         getUsers: getUsersThunkCreator\r\n//     })(withRedirectComponent);","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PropsType} from \"./HeaderContainer\";\r\n\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n\r\n    return <header className={s.header}>\r\n        <img\r\n            src=\"https://placeitmarketing.s3.amazonaws.com/public/custompages/logo-maker/Esports-Logo-Maker.png\"/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ?\r\n                <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={\"/login\"}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import {instance} from \"./API\";\r\n\r\nexport const securityAPI = {\r\n    security() {\r\n        return instance.get<{ url: string }>(\"security/get-captcha-url\")\r\n    }\r\n}","import {instance, LoginAuthResponseType, LoginResponseType, MeResponseType} from \"./API\";\r\n\r\nexport const AuthAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`);\r\n    },\r\n    login(email: string, password: number, rememberMe: boolean, captcha?: string | null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    loginAuth() {\r\n        return instance.delete<LoginAuthResponseType>(`auth/login`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType} from \"./Redux-store\";\r\nimport {securityAPI} from \"../API/SecurityAPI\";\r\nimport {AuthAPI} from \"../API/AuthAPI\";\r\n\r\nconst SET_USER_DATA = \"sn/auth/SET_USER_DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"sn/auth/GET_CAPTCHA_URL_SUCCESS\";\r\ntype ActionsType = SetAuthUserDataAction | GetCaptchaUrlACType\r\n\r\nexport type InitialStateType = {\r\n    userId: string\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl?: string | null\r\n}\r\nexport type PostPropsType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    resultCode?: number\r\n    messages?: Array<string>\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    userId: '',\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataAction = {\r\n    type: typeof SET_USER_DATA\r\n    payload: InitialStateType\r\n}\r\nexport type GetCaptchaUrlACType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: { captchaUrl: string | null }\r\n}\r\ntype ThunkType = BaseThunkType<ActionsType | SetAuthUserDataAction | FormAction>;\r\n\r\nexport const setAuthUserData = (userId: string, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataAction => ({\r\n    type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n} as const);\r\nexport const getCaptchaUrlAC = (captchaUrl: string | null): GetCaptchaUrlACType => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\r\n} as const)\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch: Dispatch) => {\r\n    let response = await AuthAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email: string, password: number, rememberMe: boolean = false, captcha?: string | null): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await AuthAPI.login(email, password, rememberMe, captcha);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"login\", {_error: message}));\r\n        }\r\n    }\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await AuthAPI.loginAuth();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData('', null, null, false));\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let response = await securityAPI.security();\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlAC(captchaUrl));\r\n\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport Header from \"./Header\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\nexport type PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    //перенесли в APP\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserData()\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n//передает компаненте данные из URL\r\nlet WithUrlDataContainerComponent = withRouter(HeaderContainer);\r\n\r\n\r\n//передает в компаненту данные из store\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, any, any>(mapStateToProps, {logout})(WithUrlDataContainerComponent);","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {createField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/Validators/validators\";\r\nimport s from \"./../Common/FormsControls/FormControls.module.css\"\r\n\r\nexport type LoginFormType = {\r\n    email: string\r\n    password: number\r\n    rememberMe?: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type PropsType = {\r\n    captchaUrl?: string | null\r\n}\r\nexport const LoginForm = (props: InjectedFormProps<LoginFormType, PropsType> & PropsType) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"email\"} placeholder={\"Email\"}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"password\"} type={\"password\"}\r\n                       placeholder={\"Password\"}/>\r\n\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\r\n\r\n            </div>\r\n            {props.captchaUrl && <img src={props.captchaUrl} />}\r\n            {props.captchaUrl && createField(\"Symbol from image\", \"captcha\", [required], Input, {})}\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const LoginReduxForm = reduxForm<LoginFormType, PropsType>({form: \"login\"})(LoginForm)\r\n","import React from \"react\";\r\nimport {LoginFormType, LoginReduxForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl?: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: number, rememberMe?: boolean, captchaUrl?: string | null) => Promise<void>\r\n}\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    //isAuth можно и так достать\r\n    // const isAuth = useSelector<AllAppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const onSubmit = (formData: LoginFormType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captchaUrl)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AllAppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","export type FriendsType = {\r\n    id: number\r\n    age: number\r\n    name: string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    friends: [\r\n        {name: \"Andrew\", age: 32, id: 1},\r\n        {name: \"Sasha\", age: 33, id: 2},\r\n        {name: \"Sveta\", age: 29, id: 3},\r\n    ] as Array<FriendsType>,\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = \"SN/APP/INITIALIZED_SUCCESS\";\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionType = InitializedSuccessType;\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type InitializedSuccessType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\n\r\nexport const initializedSuccess = (): InitializedSuccessType => ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AllAppStateType, unknown, AppActionType>) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n\r\nexport default appReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profilePageReducer from \"./profilePage-reducer\";\r\nimport dialogsPageReducer from \"./dialogsPage-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// функция combineReducers склеивает reducer, тоесть создает state\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n// расширение (REDUX_DEVTOOLS_EXTENSION)\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// или\r\n// const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// расширение (REDUX_DEVTOOLS_EXTENSION)\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\n// функция создает store\r\n// let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AllAppStateType = ReturnType<typeof reducers>;\r\nexport type AppStoreType = typeof store;\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AllAppStateType, unknown, A>\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from \"react\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\n\r\n\r\nexport let WithSuspense = (Component: React.ComponentType<any>) => (props: RouteComponentProps<{}, any, unknown>) => {\r\n    return (\r\n        <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    )\r\n};","import React, {lazy} from \"react\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Music from \"./Components/Music/Music\";\r\nimport Navbar from \"./Components/Navbar/Navbar\";\r\nimport News from \"./Components/News/news\";\r\nimport Setting from \"./Components/Setting/Setting\";\r\nimport UsersContainer from \"./Components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\"\r\nimport Login from \"./Components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport store, {AllAppStateType} from \"./redux/Redux-store\";\r\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {WithSuspense} from \"./Components/HOC/WithSuspense\";\r\n\r\nconst DialogsContainer = lazy(() => import(\"./Components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = lazy(() => import(\"./Components/Profile/ProfileContainer\"));\r\n\r\n\r\ntype AppType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<AppType> {\r\n\r\n    catchAllUnhandledErrors(promiseRejectionEvent: any) {\r\n        alert(\"Some error occured\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener(\"unhandledRejection\", this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledRejection\", this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <div className=\"app-wrapper\">\r\n                    <HeaderContainer/>\r\n                    <Navbar/>\r\n                    <div className=\"app-wrapper-content\">\r\n                        <Switch>\r\n                            {/*Route - реактовская компонента, которая при совпадении с ее path позовет колбэк находящийся в ней*/}\r\n                            <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"}/>}/>\r\n                            <Route path=\"/dialogs\" render={WithSuspense(DialogsContainer)}/>\r\n                            <Route path=\"/profile/:userId?\" render={WithSuspense(ProfileContainer)}/>\r\n                            <Route path=\"/news\" render={() => <News/>}/>\r\n                            <Route path=\"/music\" render={() => <Music/>}/>\r\n                            <Route path=\"/settings\" render={() => <Setting/>}/>\r\n                            <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                            <Route path=\"/login\" render={() => <Login/>}/>\r\n                            <Route path=\"*\" render={() => <div><b>404 NOT FOUND</b></div>}/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AllAppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n// const mapDispatchToProps = (state: AllAppStateType) => ({\r\n//     getAuthUserData:\r\n// })\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nexport let MainAppContainer = () => {\r\n\r\n    // обернули APP что бы наши страницы переключались без перезагрузки\r\n    return <React.StrictMode>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </React.StrictMode>\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {MainAppContainer} from \"./App\";\n\nReactDOM.render(<MainAppContainer/>, document.getElementById(\"root\"));\n\n\n// эта компонента отрисовывает мое приложение\n// export let rerenderEntireTree = () => {\n//\n// }\n// rerenderEntireTree();\n\n// store.subscribe(rerenderEntireTree);\n\nreportWebVitals();\n","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    input: any\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({input, meta, children, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n\r\n}\r\n\r\nexport const createField = (placeholder: string,\r\n                            name: string,\r\n                            validators: any,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") => {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/Pinwheel.21e3df13.gif\";","import React from \"react\";\r\nimport preloader from \"../../../asseds/images/Pinwheel.gif\";\r\n\r\n\r\nlet Preloader: React.FC = () => {\r\n\r\n    return <>\r\n         <img src={preloader}/>\r\n    </>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3yUwP\",\"error\":\"FormControls_error__3zLLX\",\"formSummaryError\":\"FormControls_formSummaryError__1SIqZ\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1_gcO\",\"pageNumber\":\"Paginator_pageNumber__1xOwu\",\"selectedPage\":\"Paginator_selectedPage__To8FU\"};"],"sourceRoot":""}