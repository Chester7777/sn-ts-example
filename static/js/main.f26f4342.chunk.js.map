{"version":3,"sources":["Utils/Validators/validators.ts","Components/Common/Paginator/Paginator.module.css","API/ProfileAPI.ts","redux/profilePage-reducer.ts","redux/dialogsPage-reducer.ts","asseds/images/user.png","API/ChatAPI.tsx","redux/chat-reducer.ts","Components/Users/Users.module.css","API/API.ts","reportWebVitals.ts","Components/Music/Music.tsx","Components/News/news.tsx","Components/Setting/Setting.tsx","Components/Login/LoginForm.tsx","API/SecurityAPI.ts","API/AuthAPI.ts","redux/auth-reducer.ts","Components/Login/Login.tsx","redux/sidebar-reducer.ts","API/UsersAPI.ts","redux/users-reducer.ts","redux/app-reducer.ts","redux/Redux-store.ts","Components/HOC/WithSuspense.tsx","redux/users-selectors.ts","Components/Common/Paginator/Paginator.tsx","Components/Users/UsersSearchForm.tsx","Components/Users/Users.tsx","Components/Users/UsersContainer.tsx","redux/auth-selectors.ts","Components/Header/Header.tsx","App.tsx","index.tsx","Components/Common/FormsControls/FormsControls.tsx","asseds/images/icons8_Spinner.gif","Components/Common/Preloader/Preloader.tsx","Components/Common/FormsControls/FormControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","status","put","filePhoto","formData","FormData","append","headers","profile","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likes","addPostsActionCreator","newPostText","type","setStatus","getUserProfile","dispatch","a","response","data","getStatus","updateStatus","resultCode","savePhoto","file","photos","saveProfile","getState","auth","stopSubmit","_error","messages","Promise","reject","profilePageReducer","state","action","newPost","filter","p","postId","ADD_MESSAGE","dialogs","name","addMessagesActionCreator","newMessageText","dialogsPageReducer","body","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","creatChannel","messageHandler","e","newMessage","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventNAme","callback","push","send","SET_MESSAGES_RECEIVED","SET_STATUS_CHANGED","_newMessagesHandler","_statusChangedHandler","newMessagesHandlerCreator","payload","messagesReceived","statusChangedHandlerCreator","statusChanged","startMessagesListening","stopMessagesListening","sendMessages","chatReducer","map","m","v1","index","arr","ResultCodesEnum","axios","create","baseURL","withCredentials","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Music","News","Setting","LoginReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Input","validate","placeholder","captchaUrl","src","createField","className","formSummaryError","securityAPI","AuthAPI","email","password","rememberMe","captcha","post","delete","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","login","isAuth","setAuthUserData","getCaptchaUrlAC","getAuthUserData","getCaptchaUrl","url","authReducer","connect","to","friends","age","sidebarReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","unfollow","follow","FOLLOW","UNFOLLOW","SET_USER","SET_CURRENT_PAGE","SET_FILTER","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","portionSize","usersReducer","u","followed","count","followSuccess","unfollowSuccess","setFilter","setIsFetching","setIsFollowingProgress","requestUsersThunkCreator","page","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","initialized","appReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","WithSuspense","Component","Suspense","fallback","Preloader","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getPortionSize","getUsersFilter","Paginator","useSelector","pagesCount","Math","ceil","totalItemsCount","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","cn","selectedPage","pageNumber","onPageChanged","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","setSubmitting","onFilterChanged","isSubmitting","as","disabled","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","pathname","bind","unfollowed","pageCount","small","userPhoto","some","UsersPage","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","style","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","App","promiseRejectionEvent","alert","this","initializeApp","catchAllUnhandledErrors","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","pageTitle","textAlign","AppContainer","promise","all","MainAppContainer","StrictMode","ReactDOM","document","getElementById","FormControl","input","meta","children","hasError","touched","formControl","Textarea","restProps","validators","text","preloader"],"mappings":"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","file":"static/js/main.f26f4342.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1_gcO\",\"pageNumber\":\"Paginator_pageNumber__1xOwu\",\"selectedPage\":\"Paginator_selectedPage__To8FU\"};","import {PhotosType, ProfilePropsType} from \"../redux/profilePage-reducer\";\r\nimport {APIResponseType, instance, LoginAuthResponseType} from \"./API\";\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfilePropsType>(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<StatusProfileType>(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(filePhoto: string) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", filePhoto)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfilePropsType) {\r\n        return instance.put<LoginAuthResponseType>(`profile`, profile)\r\n    }\r\n}\r\n\r\nexport type SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n};\r\n\r\nexport type StatusProfileType = {\r\n    resultCode: number,\r\n    message: string,\r\n    data: {\r\n        resultCode: number\r\n        messages: string[],\r\n        data: {}\r\n    }\r\n};\r\n\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType} from \"./Redux-store\";\r\nimport {profileAPI} from \"../API/ProfileAPI\";\r\n\r\n\r\nconst ADD_POST = \"sn/PROFILE/ADD-POST\";\r\nconst DELETE_POST = \"sn/PROFILE/DELETE_POST\";\r\nconst SET_USER_PROFILE = \"sn/PROFILE/SET_USER_PROFILE\";\r\nconst SET_STATUS = \"sn/PROFILE/SET_STATUS\";\r\nconst SAVE_PHOTO_SUCCESS = \"sn/PROFILE/SAVE_PHOTO_SUCCESS\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n};\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: null,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: null,\r\n    github: string,\r\n    mainLink: null\r\n};\r\nexport type PhotosType = {\r\n    small: string,\r\n    large: string\r\n};\r\nexport type ProfilePropsType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n};\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hey, why nobody love me\", likes: \"15\"},\r\n        {id: 2, message: \"It`s our new program! Hey\", likes: \"20\"},\r\n    ] as Array<PostsType>,\r\n    profile: null as ProfilePropsType | null,\r\n    status: \"\"\r\n};\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst profilePageReducer = (state = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likes: \"0\"\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            };\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: state.profile && {...state.profile, photos: action.photos}\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport const addPostsActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const);\r\nexport const deletePostsActionCreator = (postId: number) => ({type: DELETE_POST, postId} as const);\r\nexport const setUserProfile = (profile: ProfilePropsType) => ({type: SET_USER_PROFILE, profile} as const);\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const);\r\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos} as const);\r\n\r\ntype ThunkType = BaseThunkType<ProfileActionType | FormAction>;\r\n\r\nexport const getUserProfile = (userId: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getProfile(userId);\r\n        dispatch(setUserProfile(response.data));\r\n    }\r\nexport const getStatus = (userId: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userId);\r\n        dispatch(setStatus(response.data))\r\n    }\r\nexport const updateStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\nexport const savePhoto = (file: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.savePhoto(file);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(response.data.data.photos))\r\n        }\r\n    }\r\n\r\nexport const saveProfile = (profile: ProfilePropsType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        const userId = getState().auth.userId\r\n        let response = await profileAPI.saveProfile(profile);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n            return Promise.reject(response.data.messages[0])\r\n        }\r\n    }\r\n\r\n\r\nexport type ProfileActionType =\r\n    ReturnType<typeof addPostsActionCreator> |\r\n    ReturnType<typeof deletePostsActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof savePhotoSuccess>\r\n\r\nexport default profilePageReducer;","const ADD_MESSAGE = \"sn/DIALOGS/ADD-MESSAGE\";\r\n// const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    // newMessageText: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    messages: string\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dima\"},\r\n        {id: 2, name: \"Jeny\"},\r\n        {id: 3, name: \"Oly\"},\r\n        {id: 4, name: \"Milana\"},\r\n        {id: 5, name: \"Katy\"},\r\n        {id: 6, name: \"Andrey\"},\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, messages: \"Hi\"},\r\n        {id: 2, messages: \"How is your It-kamasutra?\"},\r\n        {id: 3, messages: \"Yo\"},\r\n    ] as Array<MessagesType>\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst dialogsPageReducer = (state = initialState, action: DialogsPageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let body = action.newMessageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, messages: body}]\r\n            }\r\n        // case UPDATE_NEW_MESSAGE_TEXT:\r\n        //     return {\r\n        //         ...state,\r\n        //         newMessageText: action.newMessage\r\n        // }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const addMessagesActionCreator = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)\r\n// export const onMessageChangeActionCreator = (newMessage: string) => ({\r\n//     type: UPDATE_NEW_MESSAGE_TEXT,\r\n//     newMessage: newMessage\r\n// } as const)\r\n\r\nexport default dialogsPageReducer;\r\n\r\ntype DialogsPageActionType = ReturnType<typeof addMessagesActionCreator>\r\n// ReturnType<typeof onMessageChangeActionCreator>\r\n","export default __webpack_public_path__ + \"static/media/user.c6ac9673.png\";","const subscribers = {\r\n    \"messages-received\": [] as MessagesReceivedSubscribesType[],\r\n    \"status-changed\": [] as StatusChangedSubscribesType[],\r\n};\r\n\r\nlet ws: WebSocket | null = null;\r\n\r\ntype EventsNamesType = \"messages-received\" | \"status-changed\"\r\n\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus(\"pending\");\r\n    setTimeout(creatChannel, 3000);\r\n};\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessage = JSON.parse(e.data);\r\n    subscribers[\"messages-received\"].forEach(s => s(newMessage))\r\n};\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus(\"ready\");\r\n};\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus(\"error\");\r\n    console.error(\"Refresh page\");\r\n};\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener(\"close\", closeHandler);\r\n    ws?.removeEventListener(\"message\", messageHandler);\r\n    ws?.removeEventListener(\"open\", openHandler);\r\n    ws?.removeEventListener(\"error\", errorHandler);\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusChangedType) => {\r\n    subscribers[\"status-changed\"].forEach(s => s(status))\r\n}\r\n\r\nfunction creatChannel() {\r\n    cleanUp();\r\n    ws?.close();\r\n    ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n    notifySubscribersAboutStatus(\"pending\");\r\n    ws.addEventListener(\"close\", closeHandler);\r\n    ws.addEventListener(\"message\", messageHandler);\r\n    ws.addEventListener(\"open\", openHandler);\r\n    ws.addEventListener(\"error\", errorHandler);\r\n};\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        creatChannel()\r\n    },\r\n    stop() {\r\n        subscribers[\"messages-received\"] = [];\r\n        subscribers[\"status-changed\"] = [];\r\n        cleanUp();\r\n        ws?.close();\r\n    },\r\n    subscribers(eventNAme: EventsNamesType, callback: MessagesReceivedSubscribesType | StatusChangedSubscribesType) {\r\n        // @ts-ignore\r\n        subscribers[eventNAme].push(callback)\r\n        //отписаться\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventNAme] = subscribers[eventNAme].filter(s => s !== callback)\r\n        }\r\n    },\r\n    //второй вариант отписаться\r\n    unsubscribe(eventNAme: EventsNamesType, callback: MessagesReceivedSubscribesType | StatusChangedSubscribesType) {\r\n        // @ts-ignore\r\n        subscribers[eventNAme] = subscribers[eventNAme].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\nexport type StatusChangedType = \"pending\" | \"ready\" | \"error\";\r\ntype MessagesReceivedSubscribesType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscribesType = (status: StatusChangedType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {BaseThunkType} from \"./Redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusChangedType} from \"../API/ChatAPI\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nconst SET_MESSAGES_RECEIVED = \"sn/chat/SET_MESSAGES_RECEIVED\";\r\nconst SET_STATUS_CHANGED = \"sn/chat/SET_STATUS_CHANGED\";\r\ntype ActionsType = SetChatMessagesType | SetStatusChanged;\r\nexport type ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nexport type InitialStateType = {\r\n    messages: ChatMessageType[]\r\n    status: StatusChangedType\r\n}\r\n\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageAPIType[],\r\n    status: \"pending\" as StatusChangedType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SET_MESSAGES_RECEIVED:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages\r\n                    .map(m => ({...m, id: v1()}))]\r\n                    .filter((m, index, arr) => index >= arr.length - 100 )\r\n            }\r\n        case SET_STATUS_CHANGED:\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetChatMessagesType = {\r\n    type: typeof SET_MESSAGES_RECEIVED\r\n    payload: InitialStateType\r\n}\r\nexport type SetStatusChanged = {\r\n    type: typeof SET_STATUS_CHANGED\r\n    payload: InitialStateType\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>;\r\n\r\nexport const messagesReceived = (messages: ChatMessageAPIType[]) => ({\r\n    type: SET_MESSAGES_RECEIVED, payload: {messages}\r\n} as const);\r\nexport const statusChanged = (status: StatusChangedType) => ({\r\n    type: SET_STATUS_CHANGED, payload: {status}\r\n} as const);\r\n\r\nlet _newMessagesHandler: ((messages: ChatMessageAPIType[]) => void) | null = null;\r\nlet _statusChangedHandler: ((status: StatusChangedType) => void) | null = null;\r\n\r\nconst newMessagesHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessagesHandler === null) {\r\n        _newMessagesHandler = (messages) => {\r\n            dispatch(messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessagesHandler\r\n};\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch: Dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribers(\"messages-received\", newMessagesHandlerCreator(dispatch))\r\n    chatAPI.subscribers(\"status-changed\", statusChangedHandlerCreator(dispatch))\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch: Dispatch) => {\r\n    chatAPI.unsubscribe(\"messages-received\", newMessagesHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe(\"status-changed\", statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\nexport const sendMessages = (message: string): ThunkType => async (dispatch: Dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\nexport default chatReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__fXTtC\",\"selectedPage\":\"Users_selectedPage__2a3HY\"};","import axios from \"axios\";\r\nimport {UsersType} from \"../redux/users-reducer\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"0b171657-160a-4f70-93fb-80213f27dfbf\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\nexport type LoginAuthResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type MeResponseType = {\r\n    data: {\r\n        id: string\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type LoginResponseType = {\r\n    data: {\r\n        userId: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type GetProfileResponseType = {\r\n    userId: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\n\r\nconst  Music = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\n\r\n\r\n\r\n\r\nfunction News () {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\n\r\n\r\nconst Setting = () => {\r\n    return(\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {createField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/Validators/validators\";\r\nimport s from \"./../Common/FormsControls/FormControls.module.css\"\r\n\r\nexport type LoginFormType = {\r\n    email: string\r\n    password: number\r\n    rememberMe?: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type PropsType = {\r\n    captchaUrl?: string | null\r\n}\r\nexport const LoginForm = (props: InjectedFormProps<LoginFormType, PropsType> & PropsType) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"email\"} placeholder={\"Email\"}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"password\"} type={\"password\"}\r\n                       placeholder={\"Password\"}/>\r\n\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\r\n\r\n            </div>\r\n            {props.captchaUrl && <img src={props.captchaUrl} />}\r\n            {props.captchaUrl && createField(\"Symbol from image\", \"captcha\", [required], Input, {})}\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const LoginReduxForm = reduxForm<LoginFormType, PropsType>({form: \"login\"})(LoginForm)\r\n","import {instance} from \"./API\";\r\n\r\nexport const securityAPI = {\r\n    security() {\r\n        return instance.get<{ url: string }>(\"security/get-captcha-url\")\r\n    }\r\n}","import {instance, LoginAuthResponseType, LoginResponseType, MeResponseType} from \"./API\";\r\n\r\nexport const AuthAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`);\r\n    },\r\n    login(email: string, password: number, rememberMe: boolean, captcha?: string | null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    loginAuth() {\r\n        return instance.delete<LoginAuthResponseType>(`auth/login`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType} from \"./Redux-store\";\r\nimport {securityAPI} from \"../API/SecurityAPI\";\r\nimport {AuthAPI} from \"../API/AuthAPI\";\r\n\r\nconst SET_USER_DATA = \"sn/auth/SET_USER_DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"sn/auth/GET_CAPTCHA_URL_SUCCESS\";\r\ntype ActionsType = SetAuthUserDataAction | GetCaptchaUrlACType\r\n\r\nexport type InitialStateType = {\r\n    userId: string\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl?: string | null\r\n}\r\nexport type PostPropsType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    resultCode?: number\r\n    messages?: Array<string>\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    userId: '',\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataAction = {\r\n    type: typeof SET_USER_DATA\r\n    payload: InitialStateType\r\n}\r\nexport type GetCaptchaUrlACType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: { captchaUrl: string | null }\r\n}\r\ntype ThunkType = BaseThunkType<ActionsType | SetAuthUserDataAction | FormAction>;\r\n\r\nexport const setAuthUserData = (userId: string, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataAction => ({\r\n    type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n} as const);\r\nexport const getCaptchaUrlAC = (captchaUrl: string | null): GetCaptchaUrlACType => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\r\n} as const)\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch: Dispatch) => {\r\n    let response = await AuthAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email: string, password: number, rememberMe: boolean = false, captcha?: string | null): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await AuthAPI.login(email, password, rememberMe, captcha);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"login\", {_error: message}));\r\n        }\r\n    }\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await AuthAPI.loginAuth();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData('', null, null, false));\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    let response = await securityAPI.security();\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlAC(captchaUrl));\r\n\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport {LoginFormType, LoginReduxForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl?: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: number, rememberMe?: boolean, captchaUrl?: string | null) => Promise<void>\r\n}\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    //isAuth можно и так достать\r\n    // const isAuth = useSelector<AllAppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const onSubmit = (formData: LoginFormType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captchaUrl)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AllAppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","export type FriendsType = {\r\n    id: number\r\n    age: number\r\n    name: string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    friends: [\r\n        {name: \"Andrew\", age: 32, id: 1},\r\n        {name: \"Sasha\", age: 33, id: 2},\r\n        {name: \"Sveta\", age: 29, id: 3},\r\n    ] as Array<FriendsType>,\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {instance, LoginAuthResponseType} from \"./API\";\r\nimport {UsersType} from \"../redux/users-reducer\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string = \"\", friend: null | boolean = null) {\r\n        return instance.get<GetTasksResponseType>(\r\n            `users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`)\r\n        )\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<LoginAuthResponseType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<any>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    }\r\n}\r\nexport type GetTasksResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n// export type FollowPostPropsType = {\r\n//     data: {},\r\n//     messages: [],\r\n//     resultCode: number\r\n// }","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../API/UsersAPI\";\r\nimport {BaseThunkType} from \"./Redux-store\";\r\n\r\n\r\nconst FOLLOW = \"SN/USERS/FOLLOW\";\r\nconst UNFOLLOW = \"SN/USERS/UNFOLLOW\";\r\nconst SET_USER = \"SN/USERS/SET_USER\";\r\nconst SET_CURRENT_PAGE = \"SN/USERS/SET_CURRENT_PAGE\";\r\nconst SET_FILTER = \"SN/USERS/SET_FILTER\";\r\nconst SET_TOTAL_COUNT = \"SN/USERS/SET_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"SN/USERS/TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n    filter: {\r\n        term: string\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\nexport type UsersType = {\r\n    \"name\": string\r\n    \"id\": number\r\n    \"uniqueUrlName\": string | null\r\n    \"photos\": {\r\n        \"small\": string | null\r\n        \"large\": string | null\r\n    },\r\n    \"status\": string | null\r\n    \"followed\": boolean\r\n}\r\n\r\n\r\ntype CountryType = {\r\n    country: string\r\n    citi: string\r\n}\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nexport let initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n    portionSize: 10,\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //users: [...state.users],\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USER: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USER, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setFilter = (filter: FilterType) => ({type: SET_FILTER, payload: filter} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const setIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching, userId\r\n} as const)\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setFilter> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setIsFollowingProgress>\r\n\r\nexport type FilterType = typeof initialState.filter;\r\n\r\n\r\nexport type GetUsersThunkCreatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n}\r\n\r\n// type ThunkType = ThunkAction<void, AllAppStateType, unknown, ActionType>\r\nexport const requestUsersThunkCreator = (page: number, pageSize: number, filter: FilterType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(setFilter(filter));\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\ntype ThunkType = BaseThunkType<UsersActionType>;\r\n\r\nlet followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: (userId: number) => Promise<any>, actionCreator: (userId: number) => UsersActionType) => {\r\n    dispatch(setIsFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(setIsFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n        } catch (reject) {\r\n            return reject.data.data.error\r\n        }\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\n//refactoring дублирование кода\r\n// export const follow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.follow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(followSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }\r\n// export const unfollow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.unfollow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(unfollowSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = \"SN/APP/INITIALIZED_SUCCESS\";\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionType = InitializedSuccessType;\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type InitializedSuccessType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\n\r\nexport const initializedSuccess = (): InitializedSuccessType => ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AllAppStateType, unknown, AppActionType>) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n\r\nexport default appReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profilePageReducer from \"./profilePage-reducer\";\r\nimport dialogsPageReducer from \"./dialogsPage-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\n\r\n// функция combineReducers склеивает reducer, тоесть создает state\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n});\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\n// расширение (REDUX_DEVTOOLS_EXTENSION)\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// или\r\n// const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// расширение (REDUX_DEVTOOLS_EXTENSION)\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\n// функция создает store\r\n// let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AllAppStateType = ReturnType<typeof reducers>;\r\nexport type AppStoreType = typeof store;\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AllAppStateType, unknown, A>\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from \"react\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\n\r\n\r\nexport let WithSuspense = (Component: React.ComponentType<any>) => (props: RouteComponentProps<{}, any, unknown>) => {\r\n    return (\r\n        <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    )\r\n};","import {AllAppStateType} from \"./Redux-store\";\r\n\r\nexport const getUsers = (state: AllAppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getPageSize = (state: AllAppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AllAppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AllAppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AllAppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AllAppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getPortionSize = (state: AllAppStateType) => {\r\n    return state.usersPage.portionSize;\r\n}\r\nexport const getUsersFilter = (state: AllAppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../../redux/Redux-store\";\r\n\r\ntype PaginatorType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    portionSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nexport let Paginator: React.FC<PaginatorType> = (props) => {\r\n\r\n    const portionSize = useSelector<AllAppStateType, number>(state => state.usersPage.portionSize);\r\n\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / portionSize);\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.pageSize);\r\n    let [portionNumber, setPortionNumber] = useState<number>(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p) => {\r\n                        return <span className={cn({[styles.selectedPage]: props.currentPage === p}, styles.pageNumber)}\r\n                                     key={p}\r\n                                     onClick={(e) => {\r\n                                         props.onPageChanged(p)\r\n                                     }}>{p}</span>\r\n                    })\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>PREV</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n            }\r\n\r\n            props.onFilterChanged(filter)\r\n            setSubmitting(false);\r\n        }\r\n\r\n        return <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\"/>\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    }\r\n)","import React, {FC, useEffect} from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {FilterType, follow, requestUsersThunkCreator, unfollow, UsersType} from \"../../redux/users-reducer\";\r\nimport userPhoto from \"../../asseds/images/user.png\";\r\nimport {NavLink, useHistory} from \"react-router-dom\"\r\nimport {Paginator} from \"../Common/Paginator/Paginator\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getPortionSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype PropsType = {}\r\ntype PostPropsType = {\r\n    id: number\r\n    resultCode: number\r\n}\r\n\r\n\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const filter = useSelector(getUsersFilter);\r\n    const users = useSelector(getUsers);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n    const portionSize = useSelector(getPortionSize);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    //синхронизация URL адреса\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as { term: string, page: string, friend: string };\r\n\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page);\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string};\r\n\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n\r\n        dispatch(requestUsersThunkCreator(actualPage, pageSize, actualFilter));\r\n    }, []);\r\n\r\n    //синхронизация URL адреса\r\n    useEffect(() => {\r\n        history.push({\r\n            pathname: `/developers`,\r\n            search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n        })\r\n    }, [filter, currentPage]);\r\n\r\n\r\n    //подключаем thunkCreator (санки)\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsersThunkCreator(pageNumber, pageSize, filter));\r\n    };\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsersThunkCreator(1, pageSize, filter));\r\n    };\r\n    const followed = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    };\r\n    const unfollowed = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    };\r\n\r\n\r\n    let pageCount = Math.ceil(totalUsersCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    ;\r\n\r\n    return <div>\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n        <Paginator currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}\r\n                   portionSize={portionSize}/>\r\n        {/*<div>*/}\r\n        {/*    {pages.map(p => {*/}\r\n        {/*        return <span*/}\r\n        {/*            key={p}*/}\r\n        {/*            className={props.currentPage === p ? s.selectedPage : \"\"}*/}\r\n        {/*            onClick={(e) => props.onPageChanged(p)}*/}\r\n        {/*        >{p}</span>*/}\r\n        {/*    })}*/}\r\n        {/*</div>*/}\r\n        {/*использовал до componentDidMount*/}\r\n        {/*<button onClick={this.props.getUsers}>get users</button>*/}\r\n        {\r\n            users.map((u: UsersType) => {\r\n                    return <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={\"./profile/\" + u.id}>\r\n                            <img src={u.photos.small != null ? u.photos.small : userPhoto} className={s.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    unfollowed(u.id)\r\n                                }}>unfollow</button>\r\n                                : <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    followed(u.id)\r\n                                }}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                        <span>\r\n                        <span>\r\n                            <div>\r\n                                {u.name}\r\n                            </div>\r\n                            <div>\r\n                                {u.status}\r\n                            </div>\r\n                        </span>\r\n                        <span>\r\n                            <div>\r\n                                {\"u.location.country\"}\r\n                            </div>\r\n                            <div>\r\n                                {\"u.location.citi\"}\r\n                            </div>\r\n                        </span>\r\n                    </span>\r\n                    </div>\r\n                }\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\n","import {useSelector} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {Users} from \"./Users\";\r\n\r\n\r\n\r\ntype UsersPageType = {\r\n    pageTitle: string\r\n}\r\n\r\n//после рефакторинга\r\nexport const UsersPage: React.FC<UsersPageType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        {isFetching ? <Preloader/> : null}\r\n        {/*<Paginator />*/}\r\n        <Users/>\r\n    </>\r\n}\r\n\r\n\r\n//тоже на классовой компаненте\r\n// class UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n//подключаем thunkCreator (санки)\r\n// componentDidMount() {\r\n//     const {currentPage, pageSize, filter} = this.props;\r\n//     this.props.getUsers(currentPage, pageSize, filter);\r\n// }\r\n\r\n// componentDidMount() {\r\n//     this.props.setIsFetching(true)\r\n//     usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n//         this.props.setIsFetching(false)\r\n//         this.props.setUsers(data.items)\r\n//         this.props.setTotalUsersCount(data.totalCount)\r\n//     })\r\n// }\r\n\r\n// //подключаем thunkCreator (санки)\r\n// onPageChanged = (pageNumber: number) => {\r\n//     const {pageSize, filter} = this.props;\r\n//     this.props.getUsers(pageNumber, pageSize, filter)\r\n// }\r\n// onPageChanged = (pageNumber: number) => {\r\n//     this.props.setCurrentPage(pageNumber);\r\n//     this.props.setIsFetching(true)\r\n//     usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n//         this.props.setIsFetching(false)\r\n//         this.props.setUsers(data.items)\r\n//     })\r\n// }\r\n\r\n// onFilterChanged = (filter: FilterType) => {\r\n//     const {pageSize} = this.props;\r\n//     this.props.getUsers(1, pageSize, filter)\r\n// }\r\n\r\n// render() {\r\n// return <>\r\n//     {this.props.isFetching ? <Preloader/> : null}\r\n//     {/*<Paginator />*/}\r\n//     <Users\r\n//         // totalItemsCount={this.props.totalUsersCount}\r\n//         // pageSize={this.props.pageSize}\r\n//         // currentPage={this.props.currentPage}\r\n//         onPageChanged={this.onPageChanged}\r\n//         onFilterChanged={this.onFilterChanged}\r\n//         users={this.props.users}\r\n//         follow={this.props.follow}\r\n//         unfollow={this.props.unfollow}\r\n//         followingInProgress={this.props.followingInProgress}\r\n//         portionSize={this.props.portionSize}\r\n//         // setIsFollowingProgress={this.props.setIsFollowingProgress}\r\n//     />\r\n// </>\r\n// }\r\n// }\r\n\r\n//refactoring\r\n// let mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n// let mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: getUsers(state),\r\n//         pageSize: getPageSize(state),\r\n//         totalUsersCount: getTotalUsersCount(state),\r\n//         currentPage: getCurrentPage(state),\r\n//         isFetching: getIsFetching(state),\r\n//         followingInProgress: getFollowingInProgress(state),\r\n//         portionSize: getPortionSize(state),\r\n//         filter: getUsersFilter(state)\r\n//     }\r\n// }\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n//\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UsersType>) => {\r\n//             dispatch(setUserAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//         setIsFetching: (isFetching: boolean) => {\r\n//             dispatch(setIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, {\r\n//         follow,\r\n//         unfollow,\r\n//         setCurrentPage,\r\n//         setIsFollowingProgress,\r\n//         getUsers: requestUsersThunkCreator\r\n//     })\r\n// )(UsersContainer);\r\n// let withRedirectComponent = withAuthRedirect(UsersContainer)\r\n//\r\n// export default connect(mapStateToProps,\r\n//     {\r\n//         follow,\r\n//         unfollow,\r\n//         // setUsers,\r\n//         setCurrentPage,\r\n//         // setTotalUsersCount,\r\n//         // setIsFetching,\r\n//         setIsFollowingProgress,\r\n//         getUsers: getUsersThunkCreator\r\n//     })(withRedirectComponent);","import {AllAppStateType} from \"./Redux-store\";\r\n\r\nexport const selectIsAuth = (state: AllAppStateType) => {\r\n    return state.auth.isAuth;\r\n};\r\nexport const selectCurrentUserLogin = (state: AllAppStateType) => {\r\n    return state.auth.login;\r\n};\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype PropsType = {}\r\nexport const Header: React.FC<PropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const login = useSelector(selectCurrentUserLogin);\r\n    const dispatch = useDispatch();\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    };\r\n\r\n    const {Header} = Layout;\r\n\r\n    return <Header className=\"header\">\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\">\r\n                        <Link to=\"/developers\">Developers</Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n            {isAuth ?\r\n                <> <Col span={1}>\r\n                    <Avatar alt={login || \"\"} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>Log out</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Link to={\"/login\"}>Login</Link>\r\n                    </Button>\r\n                </Col>\r\n            }\r\n        </Row>\r\n    </Header>\r\n\r\n\r\n    //без Ant Design\r\n    // <header className={s.header}>\r\n    //     <img\r\n    //         src=\"https://placeitmarketing.s3.amazonaws.com/public/custompages/logo-maker/Esports-Logo-Maker.png\"/>\r\n    //     <div className={s.loginBlock}>\r\n    //         {props.isAuth ?\r\n    //             <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n    //             : <NavLink to={\"/login\"}>Login</NavLink>\r\n    //         }\r\n    //     </div>\r\n    // </header>\r\n}\r\n","import React, {lazy} from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport {BrowserRouter, Link, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Music from \"./Components/Music/Music\";\r\nimport News from \"./Components/News/news\";\r\nimport Setting from \"./Components/Setting/Setting\";\r\nimport Login from \"./Components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport store, {AllAppStateType} from \"./redux/Redux-store\";\r\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {WithSuspense} from \"./Components/HOC/WithSuspense\";\r\nimport {UsersPage} from \"./Components/Users/UsersContainer\";\r\nimport {Breadcrumb, Layout, Menu} from \"antd\";\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {Header} from \"./Components/Header/Header\";\r\n\r\nconst {SubMenu} = Menu;\r\nconst {Content, Footer, Sider} = Layout;\r\n\r\nconst DialogsContainer = lazy(() => import(\"./Components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = lazy(() => import(\"./Components/Profile/ProfileContainer\"));\r\nconst ChatPage = lazy(() => import(\"./pages/Chat/ChatPage\"));\r\n\r\n\r\ntype AppType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<AppType> {\r\n\r\n    catchAllUnhandledErrors(promiseRejectionEvent: any) {\r\n        alert(\"Some error occured\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener(\"unhandledRejection\", this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledRejection\", this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <Layout>\r\n                    <Header/>\r\n                    <Content style={{padding: '0 50px'}}>\r\n                        <Breadcrumb style={{margin: '16px 0'}}>\r\n                            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                        </Breadcrumb>\r\n                        <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                            <Sider className=\"site-layout-background\" width={200}>\r\n                                <Menu\r\n                                    mode=\"inline\"\r\n                                    // defaultSelectedKeys={['1']}\r\n                                    // defaultOpenKeys={['sub1']}\r\n                                    style={{height: '100%'}}\r\n                                >\r\n                                    <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My profile\">\r\n                                        <Menu.Item key=\"1\">\r\n                                            <Link to=\"/profile\">Profile</Link>\r\n                                        </Menu.Item>\r\n                                        <Menu.Item key=\"2\">\r\n                                            <Link to=\"/dialogs\">Massages</Link>\r\n                                        </Menu.Item>\r\n                                        <Menu.Item key=\"3\">\r\n\r\n                                        </Menu.Item>\r\n                                        <Menu.Item key=\"4\">\r\n                                            <Link to=\"/news\">News</Link>\r\n                                        </Menu.Item>\r\n                                    </SubMenu>\r\n                                    <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\r\n                                        <Menu.Item key=\"5\">\r\n                                            <Link to=\"/developers\">Developers</Link>\r\n                                        </Menu.Item>\r\n                                        <Menu.Item key=\"6\">\r\n                                            <Link to=\"/news\">News</Link>\r\n                                        </Menu.Item>\r\n                                        <Menu.Item key=\"7\">\r\n                                            <Link to=\"/music\">Music</Link>\r\n                                        </Menu.Item>\r\n                                        <Menu.Item key=\"8\">\r\n                                            <Link to=\"/chat\">Chat</Link>\r\n                                        </Menu.Item>\r\n                                    </SubMenu>\r\n                                    <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"Settings\">\r\n                                        <Menu.Item key=\"9\">\r\n                                            <Link to=\"/settings\">Settings</Link>\r\n                                        </Menu.Item>\r\n                                        <Menu.Item key=\"10\">option10</Menu.Item>\r\n                                        <Menu.Item key=\"11\">option11</Menu.Item>\r\n                                        <Menu.Item key=\"12\">option12</Menu.Item>\r\n                                    </SubMenu>\r\n                                </Menu>\r\n                            </Sider>\r\n                            <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                                <Switch>\r\n                                    {/*Route - реактовская компонента, которая при совпадении с ее path позовет колбэк находящийся в ней*/}\r\n                                    <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"}/>}/>\r\n                                    <Route path=\"/dialogs\" render={WithSuspense(DialogsContainer)}/>\r\n                                    <Route path=\"/profile/:userId?\" render={WithSuspense(ProfileContainer)}/>\r\n                                    <Route path=\"/news\" render={() => <News/>}/>\r\n                                    <Route path=\"/music\" render={() => <Music/>}/>\r\n                                    <Route path=\"/settings\" render={() => <Setting/>}/>\r\n                                    <Route path=\"/developers\" render={() => <UsersPage pageTitle={\"User\"}/>}/>\r\n                                    <Route path=\"/login\" render={() => <Login/>}/>\r\n                                    <Route path=\"/chat\" render={WithSuspense(ChatPage)}/>\r\n                                    <Route path=\"*\" render={() => <div><b>404 NOT FOUND</b></div>}/>\r\n                                </Switch>\r\n                            </Content>\r\n                        </Layout>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center'}}>Sotial Network ©2021 Created by Chausov</Footer>\r\n                </Layout>\r\n\r\n                {/*без Ant Design*/}\r\n                {/*<div className=\"app-wrapper\">*/}\r\n                {/*    <HeaderContainer/>*/}\r\n                {/*    <Navbar/>*/}\r\n                {/*    <div className=\"app-wrapper-content\">*/}\r\n                {/*        <Switch>*/}\r\n                {/*            /!*Route - реактовская компонента, которая при совпадении с ее path позовет колбэк находящийся в ней*!/*/}\r\n                {/*            <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"}/>}/>*/}\r\n                {/*            <Route path=\"/dialogs\" render={WithSuspense(DialogsContainer)}/>*/}\r\n                {/*            <Route path=\"/profile/:userId?\" render={WithSuspense(ProfileContainer)}/>*/}\r\n                {/*            <Route path=\"/news\" render={() => <News/>}/>*/}\r\n                {/*            <Route path=\"/music\" render={() => <Music/>}/>*/}\r\n                {/*            <Route path=\"/settings\" render={() => <Setting/>}/>*/}\r\n                {/*            <Route path=\"/users\" render={() => <UsersPage pageTitle={\"User\"}/>}/>*/}\r\n                {/*            <Route path=\"/login\" render={() => <Login/>}/>*/}\r\n                {/*            <Route path=\"*\" render={() => <div><b>404 NOT FOUND</b></div>}/>*/}\r\n                {/*        </Switch>*/}\r\n                {/*    </div>*/}\r\n                {/*    <Button >OK</Button>*/}\r\n                {/*</div>*/}\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AllAppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n// const mapDispatchToProps = (state: AllAppStateType) => ({\r\n//     getAuthUserData:\r\n// })\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nexport let MainAppContainer = () => {\r\n\r\n    // обернули APP что бы наши страницы переключались без перезагрузки\r\n    return <React.StrictMode>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </React.StrictMode>\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {MainAppContainer} from \"./App\";\n\nReactDOM.render(<MainAppContainer/>, document.getElementById(\"root\"));\n\n\n// эта компонента отрисовывает мое приложение\n// export let rerenderEntireTree = () => {\n//\n// }\n// rerenderEntireTree();\n\n// store.subscribe(rerenderEntireTree);\n\nreportWebVitals();\n","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    input: any\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({input, meta, children, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n\r\n}\r\n\r\nexport const createField = (placeholder: string,\r\n                            name: string,\r\n                            validators: any,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") => {\r\n    return <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props}\r\n        /> {text}\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/icons8_Spinner.2e32023b.gif\";","import React from \"react\";\r\nimport preloader from \"../../../asseds/images/icons8_Spinner.gif\";\r\n\r\n\r\nlet Preloader: React.FC = () => {\r\n\r\n    return <>\r\n         <img src={preloader}/>\r\n    </>\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3yUwP\",\"error\":\"FormControls_error__3zLLX\",\"formSummaryError\":\"FormControls_formSummaryError__1SIqZ\"};"],"sourceRoot":""}