{"version":3,"sources":["Components/Dialogs/Dialog.module.css","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Message/AddMassageForm.tsx","Components/Dialogs/Dialogs.tsx","Components/HOC/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialogsItems","active","to","name","Message","message","messages","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","addText","Field","component","Textarea","placeholder","validate","required","addTextButton","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","m","src","alt","values","addMessages","newMessageText","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dispatch","addMessagesActionCreator","Component","RedirectComponent","this","restProps","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,aAAe,6BAA6B,OAAS,uBAAuB,SAAW,yBAAyB,QAAU,0B,sGCgB/JC,EAZ2B,SAACC,GAEvC,IAAIC,EAAO,aAAeD,EAAME,GAEhC,OACI,qBAAKC,UAAWC,IAAEC,aAAe,IAAMD,IAAEE,OAAzC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UC6BvBC,EA7ByB,SAACT,GAcrC,OAAQ,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMW,Y,iCCfxCC,EAAcC,YAAiB,IAqBxBC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAnBqC,SAACf,GAErE,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,qBAAKf,UAAWC,IAAEe,QAAlB,SACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXd,KAAK,iBACLe,YAAY,qBACZC,SAAU,CAACC,IAAUb,OAI7B,qBAAKT,UAAWC,IAAEsB,cAAlB,SACI,kDCoCDC,EAtDC,SAAC3B,GACb,IAGM4B,EAAkB5B,EAAM6B,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAY9B,GAAI8B,EAAE9B,GAAIM,KAAMwB,EAAExB,UACrFyB,EAAmBjC,EAAM6B,YAAYlB,SAASoB,KAAI,SAACG,GAAD,OAAO,cAAC,EAAD,CAAShC,GAAIgC,EAAEhC,GAAIS,SAAUuB,EAAEvB,cAgB9F,OACI,gCACI,0CAEA,sBAAKR,UAAWC,IAAE0B,QAAlB,UACI,sBAAK3B,UAAWC,IAAEC,aAAe,IAAMD,IAAEE,OAAzC,UACI,qBAAK6B,IAAI,+EAA+EC,IAAI,KAC5F,qBACID,IAAI,sGACJC,IAAI,KACR,qBACID,IAAI,sIACJC,IAAI,KACR,qBAAKD,IAAI,2EAA2EC,IAAI,KACxF,qBACID,IAAI,qHACJC,IAAI,KACR,qBACID,IAAI,sGACJC,IAAI,KACPR,KAEL,sBAAKzB,UAAWC,IAAEO,SAAlB,UACI,8BAAMsB,IACN,cAACnB,EAAD,CAAqBG,SAnCjB,SAACoB,GAClBrC,EAAMsC,YAAYD,EAAOE,6B,uECX5BC,EAA6B,SAACC,GAAD,MAAkD,CAC/EC,OAAQD,EAAME,KAAKD,SCqDRE,sBACXC,aAhBkB,SAACJ,GACnB,MAAO,CACHZ,YAAaY,EAAMZ,YACnBa,OAAQD,EAAME,KAAKD,WAKF,SAACI,GACtB,MAAO,CACHR,YAAa,SAACC,GAAD,OAA4BO,EAASC,YAAyBR,UD9C5E,SAA+BS,GAAoC,IAChEC,EAD+D,4JAEjE,WACI,MAA6BC,KAAKlD,MAA7B0C,EAAL,EAAKA,OAAWS,EAAhB,0BACA,OAAe,IAAXT,EAAwB,cAAC,IAAD,CAAUnC,GAAG,WAGlC,cAACyC,EAAD,eAAeG,QAPuC,GACrCC,IAAMJ,WAYtC,OAFqCH,YAAQL,EAARK,CAAqCI,KCwC/DL,CAGbjB","file":"static/js/4.094b1264.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__2evgY\",\"dialogsItems\":\"Dialog_dialogsItems__d3IVJ\",\"active\":\"Dialog_active__3lWGQ\",\"messages\":\"Dialog_messages__24ZvP\",\"addText\":\"Dialog_addText__13IsA\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./../Dialog.module.css\";\r\nimport {DialogsType} from \"../../../redux/store\";\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n\r\n    let path = \"/dialogs/1\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialogsItems + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialog.module.css\";\r\n\r\n\r\ntype MessagesType = {\r\n    id: number\r\n    messages: string\r\n    // newMessageText: string\r\n}\r\n\r\n\r\nconst Message: React.FC<MessagesType> = (props) => {\r\n\r\n    // let messagesElement = React.createRef<HTMLTextAreaElement>();\r\n    //\r\n    // let addMessages = () => {\r\n    //    props.dispatch(addMessagesActionCreator());\r\n    // }\r\n    //\r\n    // let onMessageChange = () => {\r\n    //     if (messagesElement.current) {\r\n    //         props.dispatch(onMessageChangeActionCreator(messagesElement.current.value));\r\n    //     }\r\n    // }\r\n\r\n    return (<div className={s.message}>{props.messages}</div>\r\n\r\n        // <div>\r\n        //         {/*<div>*/}\r\n        //         {/*    /!*<div className={s.addText}>*!/*/}\r\n        //         {/*    /!*    <textarea onChange={onMessageChange} ref={messagesElement} value={props.newMessageText}/>*!/*/}\r\n        //         {/*    /!*</div>*!/*/}\r\n        //         {/*    /!*<div className={s.addTextButton}>*!/*/}\r\n        //         {/*    /!*    <button onClick={addMessages}></button>*!/*/}\r\n        //         {/*    /!*</div>*!/*/}\r\n        //         {/*</div>*/}\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n\r\n\r\n\r\n","import s from \"../Dialog.module.css\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nexport type AddMassageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMassageForm: React.FC<InjectedFormProps<AddMassageFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.addText}>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newMessageText\"\r\n                    placeholder=\"Enter your message\"\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.addTextButton}>\r\n                <button>send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<AddMassageFormType>({form: \"DialogAddMassageForm\"})(AddMassageForm)\r\n","import React from \"react\";\r\nimport s from \"./Dialog.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMassageFormType, AddMessageFormRedux} from \"./Message/AddMassageForm\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let messagesElement = React.createRef<HTMLTextAreaElement>();\r\n    // let newMessageBody = state.newMessageText\r\n\r\n    const dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name}/>)\r\n    const messagesElements = props.dialogsPage.messages.map((m) => <Message id={m.id} messages={m.messages}/>)\r\n\r\n    // let addMessages = () => {\r\n    //     props.addMessages()\r\n    // }\r\n    let addNewMessage = (values: AddMassageFormType) => {\r\n       props.addMessages(values.newMessageText);\r\n    }\r\n\r\n    // let onMessageChange = () => {\r\n    //     if (messagesElement.current) {\r\n    //         let body = messagesElement.current.value\r\n    //         props.onMessageChange(body)\r\n    //     }\r\n    // }\r\n    // if(!props.isAuth) return <Redirect to={\"/login\"} />\r\n    return (\r\n        <div>\r\n            <h3>Massages</h3>\r\n\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems + \" \" + s.active}>\r\n                    <img src=\"https://i.pinimg.com/originals/9a/da/3b/9ada3bc305a1f45eab527f60da172d53.png\" alt=\"\"/>\r\n                    <img\r\n                        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRm4B-uFtqzkLT-t0vUQtY3tZmoPuPASXzjDw&usqp=CAU\"\r\n                        alt=\"\"/>\r\n                    <img\r\n                        src=\"https://socialniesety.ru/files/images/components/articles_journal/originals/instagram/422/kak_sdelat_artavatarku_v_instagram_18.jpg\"\r\n                        alt=\"\"/>\r\n                    <img src=\"https://linedot.ru/wp-content/uploads/2019/10/avatarki-dlya-steam_11.jpg\" alt=\"\"/>\r\n                    <img\r\n                        src=\"https://avatars.mds.yandex.net/get-zen_doc/235144/pub_5d92e1109c944600ae6bfc5d_5d92e1c7aad43600adecf124/scale_1200\"\r\n                        alt=\"\"/>\r\n                    <img\r\n                        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQb_O0f0c1A4kOSifv2lykdbjhhXF5r6N-9kw&usqp=CAU\"\r\n                        alt=\"\"/>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>{messagesElements}</div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: AllAppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport function withAuthRedirect  <T>(Component: React.ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToPropsType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (isAuth !== true) return <Redirect to=\"/login\"/>\r\n            //можно так\r\n            // if(!this.props.isAuth) return  <Redirect to=\"/login\" />\r\n            return <Component {...restProps as T} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport {addMessagesActionCreator, DialogsPageType} from \"../../redux/dialogsPage-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../HOC/WithAuthRedirect\";\r\n\r\n//самодельный контейнер\r\n// type PropsType = {\r\n//     store: StoreType\r\n// }\r\n// const DialogsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState().dialogsPage\r\n//                     let addMessages = () => {\r\n//                         store.dispatch(addMessagesActionCreator());\r\n//                     }\r\n//                     let onMessageChange = (body: string) => {\r\n//                         store.dispatch(onMessageChangeActionCreator(body));\r\n//                     }\r\n//                     return (\r\n//                         <Dialogs addMessages={addMessages} onMessageChange={onMessageChange} dialogsPage={state}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     )\r\n// }\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addMessages: (newMessageText: string) => void\r\n    // onMessageChange: (body: string) => void\r\n\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\n// подключили react-redux\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n        // newMessageText: state.newMessageText\r\n        // newMessageText: state.dialogsPage.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addMessages: (newMessageText: string) => dispatch(addMessagesActionCreator(newMessageText)),\r\n        // onMessageChange: (body: string) => dispatch(onMessageChangeActionCreator(body))\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n//HOC создает контейненрную компаненту вокруг ProfileContainer\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n//\r\n// export default DialogsContainer;\r\n\r\n\r\n\r\n"],"sourceRoot":""}