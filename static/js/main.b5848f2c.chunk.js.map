{"version":3,"sources":["Components/Profile/MyPosts/Post/Post.module.css","Components/Navbar/Navbar.module.css","Components/Dialogs/Dialog.module.css","reportWebVitals.ts","Components/Music/Music.tsx","Components/Navbar/Navbar.tsx","Components/News/news.tsx","Components/Setting/Setting.tsx","redux/dialogsPage-reducer.ts","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Utils/Validators/validators.ts","Components/Common/FormsControls/FormsControls.tsx","Components/Dialogs/Message/AddMassageForm.tsx","Components/Dialogs/Dialogs.tsx","Components/HOC/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","API/API.ts","redux/users-reducer.ts","asseds/images/user.png","Components/Users/Users.tsx","asseds/images/Pinwheel.gif","Components/Common/Preloader/Preloader.tsx","redux/users-selectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","redux/auth-reducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profilePage-reducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/Post/AddMyPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","redux/app-reducer.ts","App.tsx","redux/sidebar-reducer.ts","redux/Redux-store.ts","index.tsx","Components/Common/FormsControls/FormControls.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Users/Users.module.css","Components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Music","Navbar","props","className","s","nav","item","active","activeClassName","to","News","Setting","ADD_MESSAGE","initialState","dialogs","id","name","messages","dialogsPageReducer","state","action","type","body","newMessageText","DialogItem","path","dialogsItems","Message","message","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","children","hasError","touched","error","formControl","Textarea","restProps","Input","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","addText","Field","component","placeholder","validate","addTextButton","Dialogs","dialogsElements","dialogsPage","map","d","messagesElements","m","src","alt","values","addMessages","mapStateToPropsForRedirect","isAuth","auth","ResultCodesEnum","compose","connect","dispatch","addMessagesActionCreator","Component","RedirectComponent","this","React","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","delete","post","profileAPI","userId","status","put","authAPI","email","password","rememberMe","FOLLOW","UNFOLLOW","SET_USER","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","usersReducer","u","followed","count","filter","setCurrentPage","setIsFetching","setIsFollowingProgress","Users","pageCount","Math","ceil","pages","i","push","p","selectedPage","onClick","e","onPageChanged","photos","small","userPhoto","disabled","some","unfollow","follow","Preloader","preloader","getUsers","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","resultCode","followSuccess","unfollowSuccess","page","items","totalCount","Header","header","loginBlock","login","logout","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","WithUrlDataContainerComponent","withRouter","LoginReduxForm","formSummaryError","stopSubmit","_error","formData","ProfileStatus","useState","aditMode","setAditMode","setStatus","useEffect","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","profile","image","image_backgraund","description","large","ADD_POST","SET_USER_PROFILE","SET_STATUS","posts","likes","profilePageReducer","newPost","newPostText","Post","maxLength10","AddMyPostFormRedux","button","MyPosts","postsElement","addPosts","myPosts","profilePage","addPostsActionCreator","Profile","MyPostsContainer","ProfileContainer","match","params","authorizedUserId","history","getUserProfile","getStatus","INITIALIZED_SUCCESS","initialized","appReducer","App","initializeApp","render","DialogsContainer","app","promise","Promise","all","friends","age","sidebarReducer","reducers","combineReducers","sidebar","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5848f2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2-0hR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3uRQR\",\"item\":\"Navbar_item__3yGGV\",\"active\":\"Navbar_active__2yhpY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__2evgY\",\"dialogsItems\":\"Dialog_dialogsItems__d3IVJ\",\"active\":\"Dialog_active__3lWGQ\",\"messages\":\"Dialog_messages__24ZvP\",\"addText\":\"Dialog_addText__13IsA\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\n\r\nconst  Music = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\nimport Friend from \"../Sidebar/friend\";\r\nimport {FriendsType} from \"../../redux/store\";\r\n\r\ntype NavbarType = {\r\n    //friends: Array<FriendsType>\r\n}\r\n\r\nconst Navbar = (props: NavbarType) => {\r\n\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={`${s.item} ${s.active}`}>\r\n\r\n{/*меняет url в браузере без перезакрузки страницы*/}\r\n                <NavLink activeClassName={s.active} to=\"/profile\">Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/dialogs\">Massages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/users\">Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/news\">News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink activeClassName={s.active} to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n            <div>\r\n                {/*<Friend friends={props.friends}/>*/}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\n\r\n\r\n\r\nfunction News () {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\n\r\n\r\n\r\nconst Setting = () => {\r\n    return(\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting;","const ADD_MESSAGE = \"ADD-MESSAGE\";\r\n// const UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    // newMessageText: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    messages: string\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: 1, name: \"Dima\"},\r\n        {id: 2, name: \"Jeny\"},\r\n        {id: 3, name: \"Oly\"},\r\n        {id: 4, name: \"Milana\"},\r\n        {id: 5, name: \"Katy\"},\r\n        {id: 6, name: \"Andrey\"},\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, messages: \"Hi\"},\r\n        {id: 2, messages: \"How is your It-kamasutra?\"},\r\n        {id: 3, messages: \"Yo\"},\r\n    ] as Array<MessagesType>\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst dialogsPageReducer = (state: initialStateType = initialState, action: DialogsPageActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let body = action.newMessageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, messages: body}]\r\n        }\r\n        // case UPDATE_NEW_MESSAGE_TEXT:\r\n        //     return {\r\n        //         ...state,\r\n        //         newMessageText: action.newMessage\r\n        // }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const addMessagesActionCreator = (newMessageText: string) => ({type: ADD_MESSAGE, newMessageText} as const)\r\n// export const onMessageChangeActionCreator = (newMessage: string) => ({\r\n//     type: UPDATE_NEW_MESSAGE_TEXT,\r\n//     newMessage: newMessage\r\n// } as const)\r\n\r\nexport default dialogsPageReducer;\r\n\r\ntype DialogsPageActionType =\r\n\r\n    ReturnType<typeof addMessagesActionCreator>\r\n    // ReturnType<typeof onMessageChangeActionCreator>\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./../Dialog.module.css\";\r\nimport {DialogsType} from \"../../../redux/store\";\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/1\" + props.id;\r\n    return (\r\n\r\n        <div className={s.dialogsItems + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialog.module.css\";\r\n\r\n\r\ntype MessagesType = {\r\n     id: number\r\n\r\n    messages: string\r\n    // newMessageText: string\r\n}\r\n\r\n\r\n\r\n\r\nconst Message: React.FC<MessagesType> = (props) => {\r\n\r\n    // let messagesElement = React.createRef<HTMLTextAreaElement>();\r\n    //\r\n    // let addMessages = () => {\r\n    //    props.dispatch(addMessagesActionCreator());\r\n    // }\r\n    //\r\n    // let onMessageChange = () => {\r\n    //     if (messagesElement.current) {\r\n    //         props.dispatch(onMessageChangeActionCreator(messagesElement.current.value));\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.message}>{props.messages}</div>\r\n            {/*<div>*/}\r\n            {/*    /!*<div className={s.addText}>*!/*/}\r\n            {/*    /!*    <textarea onChange={onMessageChange} ref={messagesElement} value={props.newMessageText}/>*!/*/}\r\n            {/*    /!*</div>*!/*/}\r\n            {/*    /!*<div className={s.addTextButton}>*!/*/}\r\n            {/*    /!*    <button onClick={addMessages}></button>*!/*/}\r\n            {/*    /!*</div>*!/*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n\r\n\r\n\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    input: any\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({input, meta, children, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            {children}\r\n        </div>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n\r\n}\r\n","import s from \"../Dialog.module.css\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nexport type AddMassageFormType = {\r\n    newMessageText: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMassageForm = (props: InjectedFormProps<AddMassageFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.addText}>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newMessageText\"\r\n                    placeholder=\"Enter your message\"\r\n                    validate={[required, maxLength50]}\r\n\r\n                />\r\n            </div>\r\n\r\n            <div className={s.addTextButton}>\r\n                <button>send</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<AddMassageFormType>({form: \"DialogAddMassageForm\"})(AddMassageForm)\r\n","import React from \"react\";\r\nimport s from \"./Dialog.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMassageFormType, AddMessageFormRedux} from \"./Message/AddMassageForm\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let messagesElement = React.createRef<HTMLTextAreaElement>();\r\n    // let newMessageBody = state.newMessageText\r\n\r\n    const dialogsElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name}/>)\r\n    const messagesElements = props.dialogsPage.messages.map((m) => <Message id={m.id} messages={m.messages}/>)\r\n\r\n    // let addMessages = () => {\r\n    //     props.addMessages()\r\n    // }\r\n    let addNewMessage = (values: AddMassageFormType) => {\r\n       props.addMessages(values.newMessageText);\r\n    }\r\n\r\n    // let onMessageChange = () => {\r\n    //     if (messagesElement.current) {\r\n    //         let body = messagesElement.current.value\r\n    //         props.onMessageChange(body)\r\n    //     }\r\n    // }\r\n    // if(!props.isAuth) return <Redirect to={\"/login\"} />\r\n    return (\r\n        <div>\r\n            <h3>Massages</h3>\r\n\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems + \" \" + s.active}>\r\n                    <img src=\"https://i.pinimg.com/originals/9a/da/3b/9ada3bc305a1f45eab527f60da172d53.png\" alt=\"\"/>\r\n                    <img\r\n                        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRm4B-uFtqzkLT-t0vUQtY3tZmoPuPASXzjDw&usqp=CAU\"\r\n                        alt=\"\"/>\r\n                    <img\r\n                        src=\"https://socialniesety.ru/files/images/components/articles_journal/originals/instagram/422/kak_sdelat_artavatarku_v_instagram_18.jpg\"\r\n                        alt=\"\"/>\r\n                    <img src=\"https://linedot.ru/wp-content/uploads/2019/10/avatarki-dlya-steam_11.jpg\" alt=\"\"/>\r\n                    <img\r\n                        src=\"https://avatars.mds.yandex.net/get-zen_doc/235144/pub_5d92e1109c944600ae6bfc5d_5d92e1c7aad43600adecf124/scale_1200\"\r\n                        alt=\"\"/>\r\n                    <img\r\n                        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQb_O0f0c1A4kOSifv2lykdbjhhXF5r6N-9kw&usqp=CAU\"\r\n                        alt=\"\"/>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>{messagesElements}</div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: AllAppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport function withAuthRedirect  <T>(Component: React.ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToPropsType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (isAuth !== true) return <Redirect to=\"/login\"/>\r\n            //можно так\r\n            // if(!this.props.isAuth) return  <Redirect to=\"/login\" />\r\n            return <Component {...restProps as T} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport {addMessagesActionCreator, DialogsPageType} from \"../../redux/dialogsPage-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../HOC/WithAuthRedirect\";\r\n\r\n//самодельный контейнер\r\n// type PropsType = {\r\n//     store: StoreType\r\n// }\r\n// const DialogsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState().dialogsPage\r\n//                     let addMessages = () => {\r\n//                         store.dispatch(addMessagesActionCreator());\r\n//                     }\r\n//                     let onMessageChange = (body: string) => {\r\n//                         store.dispatch(onMessageChangeActionCreator(body));\r\n//                     }\r\n//                     return (\r\n//                         <Dialogs addMessages={addMessages} onMessageChange={onMessageChange} dialogsPage={state}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     )\r\n// }\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addMessages: (newMessageText: string) => void\r\n    // onMessageChange: (body: string) => void\r\n\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\n// подключили react-redux\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n        // newMessageText: state.newMessageText\r\n        // newMessageText: state.dialogsPage.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addMessages: (newMessageText: string) => dispatch(addMessagesActionCreator(newMessageText)),\r\n        // onMessageChange: (body: string) => dispatch(onMessageChangeActionCreator(body))\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n//HOC создает контейненрную компаненту вокруг ProfileContainer\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n//\r\n// export default DialogsContainer;\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {GetTasksResponseType} from \"../Components/Users/UsersContainer\";\r\nimport {PostPropsType} from \"../redux/auth-reducer\";\r\nimport {ProfilePropsType, StatusProfileType} from \"../redux/profilePage-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"0b171657-160a-4f70-93fb-80213f27dfbf\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetTasksResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<LoginAuthResponseType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<PostPropsType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    }\r\n}\r\n//\r\ntype GetProfileResponseType = {\r\n    userId: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<StatusProfileType>(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: string\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginAuthResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`);\r\n    },\r\n    login(email: string, password: number, rememberMe: boolean) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    loginAuth() {\r\n        return instance.delete<LoginAuthResponseType>(`auth/login`)\r\n    }\r\n}\r\n","import {usersAPI} from \"../API/API\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USER = \"SET_USER\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersType = {\r\n    \"name\": string\r\n    \"id\": number\r\n    \"uniqueUrlName\": string | null\r\n    \"photos\": {\r\n        \"small\": string | null\r\n        \"large\": string | null\r\n    },\r\n    \"status\": string | null\r\n    \"followed\": boolean\r\n}\r\n\r\n\r\ntype CountryType = {\r\n    country: string\r\n    citi: string\r\n}\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //users: [...state.users],\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USER: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USER, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const setIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching, userId\r\n} as const)\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setIsFollowingProgress>\r\n\r\n\r\nexport type GetUsersThunkCreatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n}\r\n\r\n// type ThunkType = ThunkAction<void, AllAppStateType, unknown, ActionType>\r\nexport const requestUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        usersAPI.getUsers(page, pageSize).then(data => {\r\n            dispatch(setIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n    }\r\n}\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsFollowingProgress(true, userId));\r\n        usersAPI.follow(userId).then(data => {\r\n            if (data.data.resultCode == 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(setIsFollowingProgress(false, userId));\r\n        })\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsFollowingProgress(true, userId));\r\n        usersAPI.unfollow(userId).then(data => {\r\n            if (data.data.resultCode == 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(setIsFollowingProgress(false, userId));\r\n        })\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/user.c6ac9673.png\";","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport userPhoto from \"../../asseds/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    // setIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<number>\r\n    // resultCode: number\r\n}\r\ntype PostPropsType = {\r\n    id: number\r\n    resultCode: number\r\n}\r\n\r\n\r\nlet Users = (props: PropsType) => {\r\n    let pageCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span\r\n                    key={p}\r\n                    className={props.currentPage === p ? s.selectedPage : \"\"}\r\n                    onClick={(e) => props.onPageChanged(p)}\r\n                >{p}</span>\r\n            })}\r\n        </div>\r\n        {/*использовал до componentDidMount*/}\r\n        {/*<button onClick={this.props.getUsers}>get users</button>*/}\r\n        {\r\n            props.users.map((u: UsersType) => {\r\n                    return <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={\"./profile/\" + u.id}>\r\n                            <img src={u.photos.small != null ? u.photos.small : userPhoto} className={s.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.unfollow(u.id)\r\n\r\n                                }}>unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.follow(u.id)\r\n                                }}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                        <span>\r\n                        <span>\r\n                            <div>\r\n                                {u.name}\r\n                            </div>\r\n                            <div>\r\n                                {u.status}\r\n                            </div>\r\n                        </span>\r\n                        <span>\r\n                            <div>\r\n                                {\"u.location.country\"}\r\n                            </div>\r\n                            <div>\r\n                                {\"u.location.citi\"}\r\n                            </div>\r\n                        </span>\r\n                    </span>\r\n                    </div>\r\n                }\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/Pinwheel.21e3df13.gif\";","import React from \"react\";\r\nimport preloader from \"../../../asseds/images/Pinwheel.gif\";\r\n\r\n\r\nlet Preloader = () => {\r\n\r\n    return <>\r\n         <img src={preloader}/>\r\n    </>\r\n}\r\n\r\nexport default Preloader;","import {AllAppStateType} from \"./Redux-store\";\r\n\r\nexport const getUsers = (state: AllAppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getPageSize = (state: AllAppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AllAppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AllAppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AllAppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AllAppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {\r\n    follow,\r\n    requestUsersThunkCreator,\r\n    setCurrentPage,\r\n    setIsFollowingProgress,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    // setUsers: (users: Array<UsersType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    // setTotalUsersCount: (totalCount: number) => void\r\n    // setIsFetching: (isFetching: boolean) => void\r\n    setIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & mapDispatchToPropsType;\r\n\r\nexport type GetTasksResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n// export type OnPageChangedType = {\r\n//     onPageChanged: (pageNumber: number) => void\r\n// }\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    //подключаем thunkCreator (санки)\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //         this.props.setTotalUsersCount(data.totalCount)\r\n    //     })\r\n    // }\r\n\r\n    //подключаем thunkCreator (санки)\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n    // onPageChanged = (pageNumber: number) => {\r\n    //     this.props.setCurrentPage(pageNumber);\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                // setIsFollowingProgress={this.props.setIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n//refactoring\r\n// let mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n//\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UsersType>) => {\r\n//             dispatch(setUserAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//         setIsFetching: (isFetching: boolean) => {\r\n//             dispatch(setIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        setIsFollowingProgress,\r\n        getUsers: requestUsersThunkCreator\r\n    })\r\n)(UsersContainer);\r\n// let withRedirectComponent = withAuthRedirect(UsersContainer)\r\n//\r\n// export default connect(mapStateToProps,\r\n//     {\r\n//         follow,\r\n//         unfollow,\r\n//         // setUsers,\r\n//         setCurrentPage,\r\n//         // setTotalUsersCount,\r\n//         // setIsFetching,\r\n//         setIsFollowingProgress,\r\n//         getUsers: getUsersThunkCreator\r\n//     })(withRedirectComponent);","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PropsType} from \"./HeaderContainer\";\r\n\r\n\r\nconst Header = (props: PropsType) => {\r\n    return <header className={s.header}>\r\n        <img\r\n            src=\"https://placeitmarketing.s3.amazonaws.com/public/custompages/logo-maker/Esports-Logo-Maker.png\"/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ?\r\n                <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={\"/login\"}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../API/API\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    userId: string\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nexport type PostPropsType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    resultCode?: number\r\n    messages?: Array<string>\r\n}\r\n// export type InitialStateType = {\r\n//     data: DataPropsType\r\n//     resultCode?: number\r\n//     messages?: Array<string>\r\n// }\r\n//\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    userId: '',\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: SetAuthUserDataAction): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userId: action.payload.userId,\r\n                email: action.payload.email,\r\n                login: action.payload.login,\r\n                isAuth: action.payload.isAuth\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataAction = {\r\n    type: typeof SET_USER_DATA\r\n    payload: InitialStateType\r\n}\r\n\r\nexport const setAuthUserData = (userId: string, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataAction => ({\r\n    type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    return authAPI.me()\r\n        .then((data) => {\r\n            if (data.data.resultCode === 0) {\r\n                let {id, email, login} = data.data.data\r\n                dispatch(setAuthUserData(id, email, login, true));\r\n            }\r\n        })\r\n}\r\nexport const login = (email: string, password: number, rememberMe: boolean = false) => (dispatch: ThunkDispatch<AllAppStateType, unknown, SetAuthUserDataAction | FormAction>) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData());\r\n            } else {\r\n                let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\"\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n        })\r\n}\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n    authAPI.loginAuth()\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData('', null, null, false));\r\n            }\r\n        })\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport Header from \"./Header\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout:  () => void\r\n}\r\n\r\n\r\nexport type PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType\r\n\r\ntype DataPropsType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\ntype PostPropsType = {\r\n    data: DataPropsType\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    //перенесли в APP\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserData()\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n\r\n                <Header {...this.props} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n//передает компаненте данные из URL\r\n\r\nlet WithUrlDataContainerComponent = withRouter(HeaderContainer);\r\n\r\n\r\n//передает в компаненту данные из store\r\nexport default connect<MapStatePropsType,any,any,any>(mapStateToProps, {logout})(WithUrlDataContainerComponent);","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../Utils/Validators/validators\";\r\nimport s from \"./../Common/FormsControls/FormControls.module.css\"\r\n\r\nexport type LoginFormType = {\r\n    email: string\r\n    password: number\r\n    rememberMe: boolean\r\n}\r\nexport const LoginForm = (props: InjectedFormProps<LoginFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"email\"} placeholder={\"Email\"}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} validate={[required]} name={\"password\"} type={\"password\"}\r\n                       placeholder={\"Password\"}/>\r\n\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\r\n\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const LoginReduxForm = reduxForm<LoginFormType>({form: \"login\"})(LoginForm)\r\n","import React from \"react\";\r\nimport {LoginFormType, LoginReduxForm} from \"./LoginForm\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: number, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    //isAuth можно и так достать\r\n    // const isAuth = useSelector<AllAppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const onSubmit = (formData: LoginFormType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AllAppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","import React, {useEffect, useState} from \"react\";\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [aditMode, setAditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        if (status !== props.status) {\r\n            setStatus(props.status)\r\n        }\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setAditMode(true)\r\n    };\r\n    const deActivateEditMode = () => {\r\n        setAditMode(false)\r\n        props.updateStatus(status)\r\n    };\r\n    const changeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!aditMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"--------\"}</span>\r\n            </div>}\r\n            {aditMode &&\r\n            <div>\r\n                <input\r\n                    onChange={changeStatus}\r\n                    autoFocus={true}\r\n                    onBlur={deActivateEditMode}\r\n                    type=\"text\"\r\n                    value={status}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n\r\n//таже компонента, но классовая\r\n// class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n//     state = {\r\n//         aditMode: false,\r\n//         status: this.props.status\r\n//     }\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             aditMode: true\r\n//         })\r\n//     }\r\n//     deActivateEditMode = () => {\r\n//         this.setState({\r\n//             aditMode: false\r\n//         })\r\n//         this.props.updateStatus(this.state.status)\r\n//     }\r\n//     changeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             status: e.currentTarget.value\r\n//         })\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n//         if (prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                 status: this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.aditMode &&\r\n//                 <div>\r\n//                     <span onDoubleClick={this.activateEditMode}>{this.props.status}</span>\r\n//                 </div>}\r\n//                 {this.state.aditMode &&\r\n//                 <div>\r\n//                     <input\r\n//                         onChange={this.changeStatus}\r\n//                         autoFocus={true}\r\n//                         onBlur={this.deActivateEditMode}\r\n//                         type=\"text\"\r\n//                         value={this.props.status || \"--------\"}/>\r\n//                 </div>}\r\n//             </div>\r\n//         )\r\n//     }\r\n//\r\n// }\r\n// export default ProfileStatus;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../../../redux/profilePage-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.image}>\r\n                <img\r\n                    src=\"https://cdn.pixabay.com/photo/2016/10/21/09/29/earth-1757617__480.jpg\"\r\n                    className={s.image_backgraund}/>\r\n            </div>\r\n            <div className={s.description}>\r\n                <img src={props.profile.photos?.large}/>\r\n\r\n                    <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import {profileAPI} from \"../API/API\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likes: string\r\n}\r\ntype ContactsType = {\r\n    facebook: string,\r\n    website: null,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: null,\r\n    github: string,\r\n    mainLink: null\r\n}\r\ntype PhotosType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type ProfilePropsType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\nexport type StatusProfileType = {\r\n    resultCode: number,\r\n    message: string,\r\n    data: {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: {}\r\n}\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hey, why nobody love me\", likes: \"15\"},\r\n        {id: 2, message: \"It`s our new program! Hey\", likes: \"20\"},\r\n    ] as Array<PostsType>,\r\n    profile: {} as ProfilePropsType,\r\n    status: \"\"\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst profilePageReducer = (state: InitialStateType = initialState, action: ProfileActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 3,\r\n                message: action.newPostText,\r\n                likes: \"0\"\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            }\r\n            case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport const addPostsActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\r\nexport const setUserProfile = (profile: ProfilePropsType) => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\n\r\nexport const getUserProfile = (userId: string) => (dispatch: Dispatch<ProfileActionType>) => {\r\n    profileAPI.getProfile(userId).then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n    })\r\n}\r\nexport const getStatus = (userId: string) => (dispatch: Dispatch) => {\r\n    profileAPI.getStatus(userId).then(response => {\r\n        dispatch(setStatus(response.data))\r\n    })\r\n}\r\nexport const updateStatus = (status: string) => (dispatch: Dispatch) => {\r\n    profileAPI.updateStatus(status).then(response => {\r\n      if(response.data.resultCode === 0) {\r\n          dispatch(setStatus(status))\r\n      }\r\n    })\r\n}\r\n\r\n\r\n\r\ntype ProfileActionType =\r\n    ReturnType<typeof addPostsActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setStatus>\r\n\r\nexport default profilePageReducer;","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostsType} from \"../../../../redux/store\";\r\n\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img src=\"https://i.ytimg.com/vi/Y5GLCBjHR8U/maxresdefault.jpg\" alt=\"\"/>\r\n            {props.message}\r\n\r\n            <div>\r\n                    <span>\r\n                        likes\r\n                    </span>\r\n                {props.likes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"../MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {required, maxLengthCreator} from \"../../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\nexport type  MyPostsType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(30);\r\nexport const AddMyPostForm = (props: InjectedFormProps<MyPostsType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newPostText\"\r\n                    placeholder={\"Post message\"}\r\n                validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMyPostFormRedux = reduxForm<MyPostsType>({form: \"ProfileFddPosts\"})(AddMyPostForm)\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddMyPostFormRedux, MyPostsType} from \"./Post/AddMyPostForm\";\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElement = props.posts.map((p) => <Post id={p.id} message={p.message}\r\n                                                      likes={p.likes}/>)\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = (values: MyPostsType) => {\r\n        props.addPosts(values.newPostText)\r\n    }\r\n    //до подключения Form\r\n    // let onPostChange = () => {\r\n    //     if (newPostElement.current) {\r\n    //         let text = newPostElement.current.value;\r\n    //         props.onPostChangeActionCreator(text)\r\n    //     }\r\n    // }\r\n    return (\r\n        <div className={s.post}>\r\n            <h3>My posts</h3>\r\n            {/*<input type=\"text\"/>*/}\r\n            <AddMyPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.myPosts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostsActionCreator} from \"../../../redux/profilePage-reducer\";\r\nimport MyPosts from \"./MyPosts\"\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../../redux/Redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostsType} from \"../../../redux/store\";\r\n\r\n//самодельный контейнер\r\n// type MyPostsType = {\r\n//     store: StoreType\r\n// }\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState()\r\n//                 let addPosts = () => {\r\n//                     store.dispatch(addPostsActionCreator());\r\n//                 }\r\n//                 let onPostChange = (text: string) => {\r\n//                     let action = onPostChangeActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//                 return (\r\n//                     <MyPosts\r\n//                         onPostChangeActionCreator={onPostChange}\r\n//                         addPosts={addPosts}\r\n//                         posts={state.profilePage.posts}\r\n//                         newPostText={state.profilePage.newPostText}\r\n//                     />\r\n//                 )\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPosts: (newPostText: string) => void\r\n\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\n// подключили react-redux\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        // newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPosts: (newPostText: string) => dispatch(addPostsActionCreator(newPostText))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n//\r\n// export default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"../../redux/profilePage-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo  profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfilePropsType, updateStatus} from \"../../redux/profilePage-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType\r\n\r\n// React.ComponentClass<Pick<PropsType, \"profile\" | \"getUserProfile\">, any> & WithRouterStatics<typeof ProfileContainer>\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId  = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\nif(!userId) {\r\n    this.props.history.push(\"/login\")\r\n}\r\n        }\r\n        this.props.getUserProfile(+userId);\r\n        this.props.getStatus(+userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n//обертка compose\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n//HOC создает контейненрную компаненту вокруг ProfileContainer\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n//передает компаненте данные из URL\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n//передает в компаненту данные из store\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type AppActionType = InitializedSuccessType\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type InitializedSuccessType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): InitializedSuccessType => ({type: INITIALIZED_SUCCESS} as const)\r\n\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AllAppStateType, unknown, AppActionType>) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n\r\n}\r\n\r\n\r\nexport default appReducer;","import React from \"react\";\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\nimport \"./App.css\";\nimport Music from \"./Components/Music/Music\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport News from \"./Components/News/news\";\nimport Setting from \"./Components/Setting/Setting\";\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\"\nimport Login from \"./Components/Login/Login\";\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\nimport {getAuthUserData} from \"../src/redux/auth-reducer\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {AllAppStateType} from \"./redux/Redux-store\";\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\nimport {initializeApp} from \"./redux/app-reducer\"\n\n\ntype AppType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\n\nclass App extends React.Component<AppType> {\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <BrowserRouter>\n                <div className=\"app-wrapper\">\n                    <HeaderContainer/>\n                    <Navbar/>\n                    <div className=\"app-wrapper-content\">\n                        {/*Route - реактовская компонента, которая при совпадении с ее path позовет колбэк находящийся в ней*/}\n                        <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                        <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\n                        <Route path=\"/news\" render={() => <News/>}/>\n                        <Route path=\"/music\" render={() => <Music/>}/>\n                        <Route path=\"/settings\" render={() => <Setting/>}/>\n                        <Route path=\"/users\" render={() => <UsersContainer/>}/>\n                        <Route path=\"/login\" render={() => <Login/>}/>\n                    </div>\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AllAppStateType) => ({\n    initialized: state.app.initialized\n})\n// const mapDispatchToProps = (state: AllAppStateType) => ({\n//     getAuthUserData:\n// })\n\nexport default compose(\n    connect(mapStateToProps, {initializeApp}))(App);","export type FriendsType = {\r\n    id: number\r\n    age: number\r\n    name: string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState = {\r\n    friends: [\r\n        {name: \"Andrew\", age: 32, id: 1},\r\n        {name: \"Sasha\", age: 33, id: 2},\r\n        {name: \"Sveta\", age: 29, id: 3},\r\n    ] as Array<FriendsType>,\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport profilePageReducer from \"./profilePage-reducer\";\r\nimport dialogsPageReducer from \"./dialogsPage-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// функция combineReducers склеивает reducer, тоесть создает state\r\nlet reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n// функция создает store\r\nlet store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport type AllAppStateType = ReturnType<typeof reducers>\r\nexport type AppStoreType = typeof store\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/Redux-store\";\n\nReactDOM.render(\n    // обернули APP что бы наши страницы переключались без перезагрузки\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n\n// эта компонента отрисовывает мое приложение\n// export let rerenderEntireTree = () => {\n//\n// }\n// rerenderEntireTree();\n\n\n// store.subscribe(rerenderEntireTree);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3yUwP\",\"error\":\"FormControls_error__3zLLX\",\"formSummaryError\":\"FormControls_formSummaryError__1SIqZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"MyPosts_post__1Cwvm\",\"myPosts\":\"MyPosts_myPosts__zav6r\",\"button\":\"MyPosts_button__LQs7z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1XGa7\",\"image\":\"ProfileInfo_image__3508U\",\"image_backgraund\":\"ProfileInfo_image_backgraund__1Pc9C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__fXTtC\",\"selectedPage\":\"Users_selectedPage__2a3HY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2LuNL\",\"loginBlock\":\"Header_loginBlock__3vD8E\"};"],"sourceRoot":""}