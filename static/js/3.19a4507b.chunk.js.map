{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/Post/AddMyPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","aditMode","setAditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileInfo","profile","className","s","image","src","image_backgraund","description","photos","large","Preloader","Post","item","alt","message","likes","maxLength10","maxLengthCreator","AddMyPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","button","MyPosts","postsElement","posts","map","p","id","post","values","addPosts","newPostText","myPosts","connect","state","profilePage","dispatch","addPostsActionCreator","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.19a4507b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"MyPosts_post__1Cwvm\",\"myPosts\":\"MyPosts_myPosts__zav6r\",\"button\":\"MyPosts_button__LQs7z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1XGa7\",\"image\":\"ProfileInfo_image__3508U\",\"image_backgraund\":\"ProfileInfo_image_backgraund__1Pc9C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2-0hR\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [aditMode, setAditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        if (status !== props.status) {\r\n            setStatus(props.status)\r\n        }\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setAditMode(true)\r\n    };\r\n    const deActivateEditMode = () => {\r\n        setAditMode(false)\r\n        props.updateStatus(status)\r\n    };\r\n    const changeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!aditMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"--------\"}</span>\r\n            </div>}\r\n            {aditMode &&\r\n            <div>\r\n                <input\r\n                    onChange={changeStatus}\r\n                    autoFocus={true}\r\n                    onBlur={deActivateEditMode}\r\n                    type=\"text\"\r\n                    value={status}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n\r\n//таже компонента, но классовая\r\n// class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n//     state = {\r\n//         aditMode: false,\r\n//         status: this.props.status\r\n//     }\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             aditMode: true\r\n//         })\r\n//     }\r\n//     deActivateEditMode = () => {\r\n//         this.setState({\r\n//             aditMode: false\r\n//         })\r\n//         this.props.updateStatus(this.state.status)\r\n//     }\r\n//     changeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             status: e.currentTarget.value\r\n//         })\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n//         if (prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                 status: this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.aditMode &&\r\n//                 <div>\r\n//                     <span onDoubleClick={this.activateEditMode}>{this.props.status}</span>\r\n//                 </div>}\r\n//                 {this.state.aditMode &&\r\n//                 <div>\r\n//                     <input\r\n//                         onChange={this.changeStatus}\r\n//                         autoFocus={true}\r\n//                         onBlur={this.deActivateEditMode}\r\n//                         type=\"text\"\r\n//                         value={this.props.status || \"--------\"}/>\r\n//                 </div>}\r\n//             </div>\r\n//         )\r\n//     }\r\n//\r\n// }\r\n// export default ProfileStatus;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../../../redux/profilePage-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.image}>\r\n                <img\r\n                    src=\"https://cdn.pixabay.com/photo/2016/10/21/09/29/earth-1757617__480.jpg\"\r\n                    className={s.image_backgraund}/>\r\n            </div>\r\n            <div className={s.description}>\r\n                <img src={props.profile.photos?.large}/>\r\n\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostsType} from \"../../../../redux/store\";\r\n\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img src=\"https://i.ytimg.com/vi/Y5GLCBjHR8U/maxresdefault.jpg\" alt=\"\"/>\r\n            {props.message}\r\n\r\n            <div>\r\n                    <span>\r\n                        likes\r\n                    </span>\r\n                {props.likes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"../MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {required, maxLengthCreator} from \"../../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\nexport type  MyPostsType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(30);\r\nexport const AddMyPostForm = (props: InjectedFormProps<MyPostsType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newPostText\"\r\n                    placeholder={\"Post message\"}\r\n                validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMyPostFormRedux = reduxForm<MyPostsType>({form: \"ProfileFddPosts\"})(AddMyPostForm)\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddMyPostFormRedux, MyPostsType} from \"./Post/AddMyPostForm\";\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElement = props.posts.map((p) => <Post id={p.id} message={p.message}\r\n                                                      likes={p.likes}/>)\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = (values: MyPostsType) => {\r\n        props.addPosts(values.newPostText)\r\n    }\r\n    //до подключения Form\r\n    // let onPostChange = () => {\r\n    //     if (newPostElement.current) {\r\n    //         let text = newPostElement.current.value;\r\n    //         props.onPostChangeActionCreator(text)\r\n    //     }\r\n    // }\r\n    return (\r\n        <div className={s.post}>\r\n            <h3>My posts</h3>\r\n            {/*<input type=\"text\"/>*/}\r\n            <AddMyPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.myPosts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostsActionCreator} from \"../../../redux/profilePage-reducer\";\r\nimport MyPosts from \"./MyPosts\"\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../../redux/Redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostsType} from \"../../../redux/store\";\r\n\r\n//самодельный контейнер\r\n// type MyPostsType = {\r\n//     store: StoreType\r\n// }\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState()\r\n//                 let addPosts = () => {\r\n//                     store.dispatch(addPostsActionCreator());\r\n//                 }\r\n//                 let onPostChange = (text: string) => {\r\n//                     let action = onPostChangeActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//                 return (\r\n//                     <MyPosts\r\n//                         onPostChangeActionCreator={onPostChange}\r\n//                         addPosts={addPosts}\r\n//                         posts={state.profilePage.posts}\r\n//                         newPostText={state.profilePage.newPostText}\r\n//                     />\r\n//                 )\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPosts: (newPostText: string) => void\r\n\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\n// подключили react-redux\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        // newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPosts: (newPostText: string) => dispatch(addPostsActionCreator(newPostText))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n//\r\n// export default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"../../redux/profilePage-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfilePropsType, updateStatus} from \"../../redux/profilePage-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType\r\n\r\n// React.ComponentClass<Pick<PropsType, \"profile\" | \"getUserProfile\">, any> & WithRouterStatics<typeof ProfileContainer>\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId  = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\nif(!userId) {\r\n    this.props.history.push(\"/login\")\r\n}\r\n        }\r\n        this.props.getUserProfile(+userId);\r\n        this.props.getStatus(+userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n//обертка compose\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n//HOC создает контейненрную компаненту вокруг ProfileContainer\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n//передает компаненте данные из URL\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n//передает в компаненту данные из store\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}