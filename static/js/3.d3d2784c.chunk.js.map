{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/Post/AddMyPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","error","className","s","formSummaryError","createField","Input","Object","keys","profile","contacts","map","key","ProfileData","goToEditMode","isOwner","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","ProfileInfo","image","src","image_backgraund","description","mainPhoto","photos","large","userPhoto","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Post","item","alt","message","likes","maxLength10","maxLengthCreator","AddMyPostFormRedux","Field","component","Textarea","name","placeholder","validate","required","button","MyPosts","postsElement","posts","p","id","post","values","addPosts","newPostText","myPosts","connect","state","profilePage","dispatch","addPostsActionCreator","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Preloader","React","Component","compose","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,OAAS,0B,oBCA3FD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,UAAY,+BAA+B,iBAAmB,sCAAsC,QAAU,+B,oBCA/KD,EAAOC,QAAU,CAAC,KAAO,qB,yIC+CVC,EAzCoD,SAACC,GAEhE,MAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAiBD,EAAMI,QAAnD,mBAAOA,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACFF,IAAWJ,EAAMI,QACjBC,EAAUL,EAAMI,UAErB,CAACJ,EAAMI,SAaV,OACI,iCACMF,GACF,gCACI,yCADJ,IACoB,sBAAMK,cAfT,WACrBJ,GAAY,IAcY,SAAwCH,EAAMI,QAAU,gBAE3EF,GACD,8BACI,uBACIM,SAbK,SAACC,GAClBJ,EAAUI,EAAEC,cAAcC,QAadC,WAAW,EACXC,OAnBW,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAkBPW,KAAK,OACLJ,MAAOP,U,2CCIXY,EADiBC,YAAmB,CAACC,KAAM,gBAA1BD,EA/BT,SAACjB,GAErB,OACI,uBAAOmB,SAAUnB,EAAMoB,aAAvB,UACI,0CACCpB,EAAMqB,OAAS,qBAAKC,UAAWC,IAAEC,iBAAlB,SACXxB,EAAMqB,QAGX,gCACI,2CADJ,IACuBI,YAAY,YAAa,WAAY,GAAIC,QAEhE,gCACI,mDADJ,IAC+BD,YAAY,GAAI,iBAAkB,GAAIC,IAAO,CAACX,KAAM,gBAGnF,gCACI,wDADJ,IACoCU,YAAY,yBAA0B,4BAA6B,GAAIC,QAE3G,gCACI,0CADJ,IACsBD,YAAY,WAAY,UAAW,GAAIC,QAE7D,gCACI,0CADJ,IACsBC,OAAOC,KAAK5B,EAAM6B,QAAQC,UAAUC,KAAI,SAACC,GAC3D,OAAO,gCAAe,8BAAIA,EAAJ,KAAWP,YAAYO,EAAK,YAAcA,EAAK,GAAIN,QAAlE,MAAUM,eCqB3BC,EAAc,SAAC,GAAuD,IAAtDJ,EAAqD,EAArDA,QAASK,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,QAEzC,OACI,gCACKA,GACD,8BACI,wBAAQC,QAASF,EAAjB,oBAEJ,gCACI,2CADJ,IACuBL,EAAQQ,YAE/B,gCACI,mDADJ,IAC+BR,EAAQS,eAAiB,MAAQ,QAE/DT,EAAQS,gBACT,gCACI,wDADJ,IACoCT,EAAQU,0BAA4B,MAAQ,QAEhF,gCACI,0CADJ,IACsBV,EAAQW,WAE9B,gCACI,0CADJ,IACsBX,EAAQC,UAC9BH,OAAOC,KAAKC,EAAQC,UAAUC,KAAI,SAACC,GAC/B,OAAO,cAAC,EAAD,CAAmBS,aAAcT,EAAKU,aAAcb,EAAQC,SAASE,IAAvDA,aAaxBW,EAA4C,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAErE,OAAO,sBAAKpB,UAAWC,IAAEqB,QAAlB,UAA2B,8BAAIH,EAAJ,OAA3B,IAAmDC,MAG/CG,EAnFK,SAAC7C,GAAiC,IAAD,EAEjD,EAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OACI,gCACI,qBAAKmB,UAAWC,IAAEuB,MAAlB,SACI,qBACIC,IAAI,wEACJzB,UAAWC,IAAEyB,qBAErB,sBAAK1B,UAAWC,IAAE0B,YAAlB,UACI,qBAAK3B,UAAWC,IAAE2B,UAAWH,KAAK,UAAA/C,EAAM6B,QAAQsB,cAAd,eAAsBC,QAASC,MAChErD,EAAMmC,SAAW,uBAAOpB,KAAK,OAAOP,SApBrB,SAACC,GAAsC,IAAD,GAC9D,UAAIA,EAAE6C,OAAOC,aAAb,aAAI,EAAgBC,SAChBxD,EAAMyD,UAAUhD,EAAE6C,OAAOC,MAAM,OAmB1BrD,EACK,cAAC,EAAD,CAAiBwD,cAAe1D,EAAM6B,QAASA,QAAS7B,EAAM6B,QAASV,SAhBxE,SAACwC,GACd3D,EAAM4D,YAAYD,GAAUE,MAAK,WAC7B1D,GAAY,SAeF,cAAC,EAAD,CAAa+B,aAAc,kBAAM/B,GAAY,IAAO0B,QAAS7B,EAAM6B,QACtDM,QAASnC,EAAMmC,UAClC,cAAC,EAAD,CAAe/B,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,sB,6CC3B1DgD,EAhBmB,SAAC9D,GAE/B,OACI,sBAAKsB,UAAWC,IAAEwC,KAAlB,UACI,qBAAKhB,IAAI,uDAAuDiB,IAAI,KACnEhE,EAAMiE,QACP,gCACQ,yCAGHjE,EAAMkE,a,kBCNjBC,EAAcC,YAAiB,IAmBxBC,EAAqBpD,YAAuB,CAACC,KAAM,mBAA9BD,EAlBL,SAACjB,GAC1B,OACI,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BACI,cAACkD,EAAA,EAAD,CACIC,UAAWC,IACXC,KAAK,cACLC,YAAa,eACjBC,SAAU,CAACC,IAAUT,OAGzB,qBAAK7C,UAAWC,IAAEsD,OAAlB,SACI,sDCaDC,EA5BC,SAAC9E,GAEb,IAAM+E,EAAe/E,EAAMgF,MAAMjD,KAAI,SAACkD,GAAD,OAAO,cAAC,EAAD,CAAiBC,GAAID,EAAEC,GAAIjB,QAASgB,EAAEhB,QAChCC,MAAOe,EAAEf,OADJe,EAAEC,OAczD,OACI,sBAAK5D,UAAWC,IAAE4D,KAAlB,UACI,0CAEA,cAACd,EAAD,CAAoBlD,SAdZ,SAACiE,GACbpF,EAAMqF,SAASD,EAAOE,gBAclB,qBAAKhE,UAAWC,IAAEgE,QAAlB,SACKR,Q,QCiCFS,eAbO,SAACC,GACnB,MAAO,CAEHT,MAAOS,EAAMC,YAAYV,UAGR,SAACW,GACtB,MAAO,CACHN,SAAU,SAACC,GAAD,OAAyBK,EAASC,YAAsBN,QAK3DE,CAA6CV,GC1B7Ce,EAnBiC,SAAC7F,GAE7C,OACI,gCACI,cAAC,EAAD,CACImC,QAASnC,EAAMmC,QACfN,QAAS7B,EAAM6B,QACfzB,OAAQJ,EAAMI,OACdU,aAAcd,EAAMc,aACpB2C,UAAWzD,EAAMyD,UACjBG,YAAa5D,EAAM4D,YACnBtB,eAAgBtC,EAAM6B,QAAQS,eAC9BJ,aAAclC,EAAMkC,eAExB,cAAC4D,EAAD,Q,wBCQNC,E,oKAEF,WACI,IAAIC,EAASC,KAAKjG,MAAMkG,MAAMC,OAAOH,OAEhCA,IACDA,EAASC,KAAKjG,MAAMoG,mBAEhBH,KAAKjG,MAAMqG,QAAQC,KAAK,UAGhCL,KAAKjG,MAAMuG,gBAAgBP,GAC3BC,KAAKjG,MAAMwG,WAAWR,K,+BAG1B,WACIC,KAAKQ,mB,gCAGT,SAAmBC,EAAgCC,GAC3CV,KAAKjG,MAAMkG,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QACzDC,KAAKQ,mB,oBAIb,WACI,OAAKR,KAAKjG,MAAM6B,QAKZ,8BACI,cAAC,EAAD,2BACQoE,KAAKjG,OADb,IAEImC,SAAU8D,KAAKjG,MAAMkG,MAAMC,OAAOH,OAClCnE,QAASoE,KAAKjG,MAAM6B,QACpBzB,OAAQ6F,KAAKjG,MAAMI,OACnBU,aAAcmF,KAAKjG,MAAMc,aACzB2C,UAAWwC,KAAKjG,MAAMyD,UACtBnB,eAAgB2D,KAAKjG,MAAM6B,QAAQS,eACnCsB,YAAaqC,KAAKjG,MAAM4D,YACxB1B,aAAc+D,KAAKjG,MAAMkC,kBAd1B,cAAC0E,EAAA,EAAD,Q,GA3BYC,IAAMC,WA6DtBC,sBAEXvB,aAbkB,SAACC,GAAD,MAAgD,CAC9D5D,QAAS4D,EAAMC,YAAY7D,QAC3BzB,OAAQqF,EAAMC,YAAYtF,OAC1BgG,iBAAkBX,EAAMuB,KAAKhB,OAC7BiB,OAAQxB,EAAMuB,KAAKC,UASE,CAACV,mBAAgBC,cAAW1F,iBAAc2C,cAAWG,kBAC1EsD,IAHOH,CAKbhB","file":"static/js/3.d3d2784c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"MyPosts_post__1Cwvm\",\"myPosts\":\"MyPosts_myPosts__zav6r\",\"button\":\"MyPosts_button__LQs7z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1XGa7\",\"mainPhoto\":\"ProfileInfo_mainPhoto__20BEE\",\"image_backgraund\":\"ProfileInfo_image_backgraund__1Pc9C\",\"contact\":\"ProfileInfo_contact__liJei\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2-0hR\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus: React.ComponentType<ProfileStatusPropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect(() => {\r\n        if (status !== props.status) {\r\n            setStatus(props.status)\r\n        }\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    };\r\n    const changeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"--------\"}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={changeStatus}\r\n                    autoFocus={true}\r\n                    onBlur={deActivateEditMode}\r\n                    type=\"text\"\r\n                    value={status}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n\r\n//таже компонента, но классовая\r\n// class ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n//     state = {\r\n//         aditMode: false,\r\n//         status: this.props.status\r\n//     }\r\n//     activateEditMode = () => {\r\n//         this.setState({\r\n//             aditMode: true\r\n//         })\r\n//     }\r\n//     deActivateEditMode = () => {\r\n//         this.setState({\r\n//             aditMode: false\r\n//         })\r\n//         this.props.updateStatus(this.state.status)\r\n//     }\r\n//     changeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//         this.setState({\r\n//             status: e.currentTarget.value\r\n//         })\r\n//     }\r\n//\r\n//     componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n//         if (prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                 status: this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n//\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.aditMode &&\r\n//                 <div>\r\n//                     <span onDoubleClick={this.activateEditMode}>{this.props.status}</span>\r\n//                 </div>}\r\n//                 {this.state.aditMode &&\r\n//                 <div>\r\n//                     <input\r\n//                         onChange={this.changeStatus}\r\n//                         autoFocus={true}\r\n//                         onBlur={this.deActivateEditMode}\r\n//                         type=\"text\"\r\n//                         value={this.props.status || \"--------\"}/>\r\n//                 </div>}\r\n//             </div>\r\n//         )\r\n//     }\r\n//\r\n// }\r\n// export default ProfileStatus;","import React, {FormEventHandler} from \"react\";\r\nimport {createField, Input} from \"../../Common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport s from \"../../Common/FormsControls/FormControls.module.css\";\r\nimport {ProfilePropsType} from \"../../../redux/profilePage-reducer\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfilePropsType\r\n    error: string\r\n    handleSubmit: any\r\n}\r\n// type ProfileTypeKeys = GetStringKeys<PropsType>\r\n\r\nconst ProfileDataForm = (props: ProfileDataFormType) => {\r\n\r\n    return (\r\n        <form  onSubmit={props.handleSubmit}>\r\n            <button>save</button>\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <b>Full name:</b> {createField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills:</b> {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> {createField(\"About me\", \"aboutMe\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(props.profile.contacts).map((key) => {\r\n                return <div key={key}><b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b> </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<any,any>({form: \"edit-profile\"})(ProfileDataForm);\r\n export default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfilePropsType} from \"../../../redux/profilePage-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport userPhoto from \"../../../asseds/images/user.png\"\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (filePhoto: any) => void\r\n    lookingForAJob: boolean\r\n    saveProfile: (formData: any) => Promise<void>\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataType) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.image}>\r\n                <img\r\n                    src=\"https://cdn.pixabay.com/photo/2016/10/21/09/29/earth-1757617__480.jpg\"\r\n                    className={s.image_backgraund}/>\r\n            </div>\r\n            <div className={s.description}>\r\n                <img className={s.mainPhoto} src={props.profile.photos?.large || userPhoto}/>\r\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => setEditMode(true)} profile={props.profile}\r\n                                   isOwner={props.isOwner}/>}\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: any, isOwner: boolean, goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, goToEditMode, isOwner}: ProfileDataType) => {\r\n\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills:</b> {profile.lookingForAJobDescription ? \"yes\" : \"no\"}\r\n            </div>}\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {profile.contacts &&\r\n            Object.keys(profile.contacts).map((key) => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\nexport const Contact: React.ComponentType<ContactType> = ({contactTitle, contactValue}) => {\r\n\r\n    return <div className={s.contact}><b>{contactTitle}:</b> {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\nimport {PostsType} from \"../../../../redux/store\";\r\n\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://i.ytimg.com/vi/Y5GLCBjHR8U/maxresdefault.jpg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                    <span>\r\n                        likes\r\n                    </span>\r\n                {props.likes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"../MyPosts.module.css\";\r\nimport React from \"react\";\r\nimport {required, maxLengthCreator} from \"../../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\nexport type  MyPostsType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(30);\r\nexport const AddMyPostForm = (props: InjectedFormProps<MyPostsType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newPostText\"\r\n                    placeholder={\"Post message\"}\r\n                validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMyPostFormRedux = reduxForm<MyPostsType>({form: \"ProfileFddPosts\"})(AddMyPostForm)\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {AddMyPostFormRedux, MyPostsType} from \"./Post/AddMyPostForm\";\r\n\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElement = props.posts.map((p) => <Post key={p.id} id={p.id} message={p.message}\r\n                                                      likes={p.likes}/>)\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = (values: MyPostsType) => {\r\n        props.addPosts(values.newPostText)\r\n    }\r\n    //до подключения Form\r\n    // let onPostChange = () => {\r\n    //     if (newPostElement.current) {\r\n    //         let text = newPostElement.current.value;\r\n    //         props.onPostChangeActionCreator(text)\r\n    //     }\r\n    // }\r\n    return (\r\n        <div className={s.post}>\r\n            <h3>My posts</h3>\r\n            {/*<input type=\"text\"/>*/}\r\n            <AddMyPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.myPosts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostsActionCreator} from \"../../../redux/profilePage-reducer\";\r\nimport MyPosts from \"./MyPosts\"\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../../redux/Redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostsType} from \"../../../redux/store\";\r\n\r\n//самодельный контейнер\r\n// type MyPostsType = {\r\n//     store: StoreType\r\n// }\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState()\r\n//                 let addPosts = () => {\r\n//                     store.dispatch(addPostsActionCreator());\r\n//                 }\r\n//                 let onPostChange = (text: string) => {\r\n//                     let action = onPostChangeActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//                 return (\r\n//                     <MyPosts\r\n//                         onPostChangeActionCreator={onPostChange}\r\n//                         addPosts={addPosts}\r\n//                         posts={state.profilePage.posts}\r\n//                         newPostText={state.profilePage.newPostText}\r\n//                     />\r\n//                 )\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPosts: (newPostText: string) => void\r\n\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\n// подключили react-redux\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        // newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPosts: (newPostText: string) => dispatch(addPostsActionCreator(newPostText))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"../../redux/profilePage-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (filePhoto: string) => void\r\n    lookingForAJob: boolean\r\n    saveProfile: (formData: any) => Promise<any>\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst Profile: React.ComponentType<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n                lookingForAJob={props.profile.lookingForAJob}\r\n                goToEditMode={props.goToEditMode}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfilePropsType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profilePage-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {compose} from \"redux\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (filePhoto: string) => void\r\n    saveProfile: (profile: ProfilePropsType) => Promise<void>\r\n    goToEditMode: () => void\r\n\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType\r\n\r\n// React.ComponentClass<Pick<PropsType, \"profile\" | \"getUserProfile\">, any> & WithRouterStatics<typeof ProfileContainer>\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(+userId);\r\n        this.props.getStatus(+userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    lookingForAJob={this.props.profile.lookingForAJob}\r\n                    saveProfile={this.props.saveProfile}\r\n                    goToEditMode={this.props.goToEditMode}\r\n\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n\r\n    }\r\n\r\n)\r\n\r\n//обертка compose\r\nexport default compose\r\n< React.ComponentType > (\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n        withRouter\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n//HOC создает контейненрную компаненту вокруг ProfileContainer\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n//передает компаненте данные из URL\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n//передает в компаненту данные из store\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}