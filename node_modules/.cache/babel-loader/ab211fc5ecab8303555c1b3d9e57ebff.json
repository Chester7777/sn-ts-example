{"ast":null,"code":"import { authAPI } from \"../API/API\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"samurai_network/auth/SET_USER_DATA\";\n// export type InitialStateType = {\n//     data: DataPropsType\n//     resultCode?: number\n//     messages?: Array<string>\n// }\n//\n// обьект initialState задает начальное значение state, если он не придет сразу\nlet initialState = {\n  userId: '',\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        userId: action.payload.userId,\n        email: action.payload.email,\n        login: action.payload.login,\n        isAuth: action.payload.isAuth\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispatch => {\n  return authAPI.me().then(data => {\n    if (data.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = data.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe = false) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\";\n      dispatch(stopSubmit(\"login\", {\n        _error: message\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.loginAuth().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData('', null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/redux/auth-reducer.ts"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","data","resultCode","id","password","rememberMe","response","message","messages","length","_error","logout","loginAuth"],"mappings":"AACA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAoBC,UAApB,QAAqC,YAArC;AAIA,MAAMC,aAAa,GAAG,oCAAtB;AAgBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,IAAIC,YAA8B,GAAG;AACjCC,EAAAA,MAAM,EAAE,EADyB;AAEjCC,EAAAA,KAAK,EAAE,IAF0B;AAGjCC,EAAAA,KAAK,EAAE,IAH0B;AAIjCC,EAAAA,MAAM,EAAE;AAJyB,CAArC;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAA2E;AAC3F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHL,QAAAA,MAAM,EAAEM,MAAM,CAACE,OAAP,CAAeR,MAFpB;AAGHC,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeP,KAHnB;AAIHC,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAAP,CAAeN,KAJnB;AAKHC,QAAAA,MAAM,EAAEG,MAAM,CAACE,OAAP,CAAeL;AALpB,OAAP;;AAOJ;AACI,aAAOE,KAAP;AAVR;AAYH,CAbD;;AAoBA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAAiBC,KAAjB,EAAuCC,KAAvC,EAA6DC,MAA7D,MAAyG;AACpII,EAAAA,IAAI,EAAET,aAD8H;AAC/GU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AADsG,CAAzG,CAAxB;AAIP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAwB;AACzD,SAAOf,OAAO,CAACgB,EAAR,GACFC,IADE,CACIC,IAAD,IAAU;AACZ,QAAIA,IAAI,CAACA,IAAL,CAAUC,UAAV,KAAyB,CAA7B,EAAgC;AAC5B,UAAI;AAACC,QAAAA,EAAD;AAAKf,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBY,IAAI,CAACA,IAAL,CAAUA,IAAnC;AACAH,MAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKf,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GANE,CAAP;AAOH,CARM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAgBgB,QAAhB,EAAkCC,UAAmB,GAAG,KAAxD,KAAmEP,QAAD,IAA2F;AAC9Kf,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACWM,QAAD,IAAc;AAChB,QAAIA,QAAQ,CAACL,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,UAAIU,OAAO,GAAGD,QAAQ,CAACL,IAAT,CAAcO,QAAd,CAAuBC,MAAvB,GAAgC,EAAhC,GAAqCH,QAAQ,CAACL,IAAT,CAAcO,QAAd,CAAuB,CAAvB,CAArC,GAAiE,YAA/E;AACAV,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC0B,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AACH;AACJ,GARL;AASH,CAVM;AAWP,OAAO,MAAMI,MAAM,GAAG,MAAOb,QAAD,IAAwB;AAChDf,EAAAA,OAAO,CAAC6B,SAAR,GACKZ,IADL,CACWM,QAAD,IAAc;AAChB,QAAIA,QAAQ,CAACL,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACF,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,IAAX,EAAiB,KAAjB,CAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AASP,eAAeL,WAAf","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../API/API\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst SET_USER_DATA = \"samurai_network/auth/SET_USER_DATA\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    userId: string\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nexport type PostPropsType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    resultCode?: number\r\n    messages?: Array<string>\r\n}\r\n// export type InitialStateType = {\r\n//     data: DataPropsType\r\n//     resultCode?: number\r\n//     messages?: Array<string>\r\n// }\r\n//\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    userId: '',\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: SetAuthUserDataAction): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userId: action.payload.userId,\r\n                email: action.payload.email,\r\n                login: action.payload.login,\r\n                isAuth: action.payload.isAuth\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataAction = {\r\n    type: typeof SET_USER_DATA\r\n    payload: InitialStateType\r\n}\r\n\r\nexport const setAuthUserData = (userId: string, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataAction => ({\r\n    type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n} as const)\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    return authAPI.me()\r\n        .then((data) => {\r\n            if (data.data.resultCode === 0) {\r\n                let {id, email, login} = data.data.data\r\n                dispatch(setAuthUserData(id, email, login, true));\r\n            }\r\n        })\r\n}\r\nexport const login = (email: string, password: number, rememberMe: boolean = false) => (dispatch: ThunkDispatch<AllAppStateType, unknown, SetAuthUserDataAction | FormAction>) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData());\r\n            } else {\r\n                let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\"\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n        })\r\n}\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n    authAPI.loginAuth()\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData('', null, null, false));\r\n            }\r\n        })\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}