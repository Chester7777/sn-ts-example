{"ast":null,"code":"import { authAPI, securityAPI } from \"../API/API\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"samurai_network/auth/SET_USER_DATA\";\nconst GET_CAPTCHA_URL_SUCCESS = \"samurai_network/auth/GET_CAPTCHA_URL_SUCCESS\";\nconst ActionType = SetAuthUserDataAction || GetCaptchaUrlACType;\n// export type InitialStateType = {\n//     data: DataPropsType\n//     resultCode?: number\n//     messages?: Array<string>\n// }\n//\n// обьект initialState задает начальное значение state, если он не придет сразу\nlet initialState = {\n  userId: '',\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        userId: action.payload.userId,\n        email: action.payload.email,\n        login: action.payload.login,\n        isAuth: action.payload.isAuth\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlAC = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: captchaUrl\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe = false) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.loginAuth();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData('', null, null, false));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  let response = await securityAPI.security();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlAC());\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/redux/auth-reducer.ts"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","ActionType","SetAuthUserDataAction","GetCaptchaUrlACType","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlAC","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout","loginAuth","getCaptchaUrl","security","url"],"mappings":"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","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {authAPI, securityAPI} from \"../API/API\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AllAppStateType} from \"./Redux-store\";\r\n\r\nconst SET_USER_DATA = \"samurai_network/auth/SET_USER_DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"samurai_network/auth/GET_CAPTCHA_URL_SUCCESS\";\r\nconst ActionType = SetAuthUserDataAction || GetCaptchaUrlACType\r\n\r\nexport type InitialStateType = {\r\n    userId: string\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl?: string | null\r\n}\r\nexport type PostPropsType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    resultCode?: number\r\n    messages?: Array<string>\r\n}\r\n// export type InitialStateType = {\r\n//     data: DataPropsType\r\n//     resultCode?: number\r\n//     messages?: Array<string>\r\n// }\r\n//\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    userId: '',\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: SetAuthUserDataAction): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userId: action.payload.userId,\r\n                email: action.payload.email,\r\n                login: action.payload.login,\r\n                isAuth: action.payload.isAuth,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthUserDataAction = {\r\n    type: typeof SET_USER_DATA\r\n    payload: InitialStateType\r\n}\r\nexport type GetCaptchaUrlACType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: string | null\r\n}\r\n\r\nexport const setAuthUserData = (userId: string, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataAction => ({\r\n    type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n} as const);\r\nexport const getCaptchaUrlAC = (captchaUrl: string | null): GetCaptchaUrlACType => ({type: GET_CAPTCHA_URL_SUCCESS, payload: captchaUrl} as const)\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\nexport const login = (email: string, password: number, rememberMe: boolean = false) => async (dispatch: ThunkDispatch<AllAppStateType, unknown, SetAuthUserDataAction | FormAction>) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 10 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.loginAuth();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData('', null, null, false));\r\n    }\r\n}\r\nexport const getCaptchaUrl = () => async (dispatch: Dispatch) => {\r\n    let response = await securityAPI.security();\r\n    const captchaUrl = response.data.url\r\n        dispatch(getCaptchaUrlAC());\r\n\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}