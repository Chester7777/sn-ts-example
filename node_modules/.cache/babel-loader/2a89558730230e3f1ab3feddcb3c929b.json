{"ast":null,"code":"import axios from \"axios\";\nconst instance = axios.create({\n  baseURL: `https://social-network.samuraijs.com/api/1.0/`,\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"0b171657-160a-4f70-93fb-80213f27dfbf\"\n  }\n});\nexport let ResultCodesEnum;\n\n(function (ResultCodesEnum) {\n  ResultCodesEnum[ResultCodesEnum[\"Success\"] = 0] = \"Success\";\n  ResultCodesEnum[ResultCodesEnum[\"Error\"] = 1] = \"Error\";\n  ResultCodesEnum[ResultCodesEnum[\"CaptchaIsRequired\"] = 10] = \"CaptchaIsRequired\";\n})(ResultCodesEnum || (ResultCodesEnum = {}));\n\nexport const usersAPI = {\n  getUsers(currentPage, pageSize) {\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data);\n  },\n\n  unfollow(id) {\n    return instance.delete(`follow/${id}`); // .then(response => response.data)\n  },\n\n  follow(id) {\n    return instance.post(`follow/${id}`); // .then(response => response.data)\n  }\n\n}; //\n\nexport const profileAPI = {\n  getProfile(userId) {\n    return instance.get(`profile/` + userId);\n  },\n\n  getStatus(userId) {\n    return instance.get(`profile/status/` + userId);\n  },\n\n  updateStatus(status) {\n    return instance.put(`profile/status`, {\n      status: status\n    });\n  },\n\n  savePhoto(filePhoto) {\n    const formData = new FormData();\n    formData.append(\"image\", filePhoto);\n    return instance.put(`profile/photo`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  },\n\n  saveProfile(profile) {\n    return instance.put(`profile`, profile);\n  }\n\n};\nexport const authAPI = {\n  me() {\n    return instance.get(`auth/me`);\n  },\n\n  login(email, password, rememberMe) {\n    return instance.post(`auth/login`, {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  loginAuth() {\n    return instance.delete(`auth/login`);\n  }\n\n};","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/API/API.ts"],"names":["axios","instance","create","baseURL","withCredentials","headers","ResultCodesEnum","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","unfollow","id","delete","follow","post","profileAPI","getProfile","userId","getStatus","updateStatus","status","put","savePhoto","filePhoto","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","loginAuth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAG,+CADgB;AAE1BC,EAAAA,eAAe,EAAE,IAFS;AAG1BC,EAAAA,OAAO,EAAE;AACL,eAAW;AADN;AAHiB,CAAb,CAAjB;AAQA,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;AAAAA,EAAAA,e,CAAAA,e;GAAAA,e,KAAAA,e;;AAMZ,OAAO,MAAMC,QAAQ,GAAG;AACpBC,EAAAA,QAAQ,CAACC,WAAD,EAAsBC,QAAtB,EAAwC;AAC5C,WAAOT,QAAQ,CAACU,GAAT,CAAoC,cAAaF,WAAY,UAASC,QAAS,EAA/E,EACFE,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IADxB,CAAP;AAEH,GAJmB;;AAKpBC,EAAAA,QAAQ,CAACC,EAAD,EAAa;AACjB,WAAOf,QAAQ,CAACgB,MAAT,CAAwC,UAASD,EAAG,EAApD,CAAP,CADiB,CAEjB;AACH,GARmB;;AASpBE,EAAAA,MAAM,CAACF,EAAD,EAAa;AACf,WAAOf,QAAQ,CAACkB,IAAT,CAA8B,UAASH,EAAG,EAA1C,CAAP,CADe,CAEf;AACH;;AAZmB,CAAjB,C,CAcP;;AAsBA,OAAO,MAAMI,UAAU,GAAG;AACtBC,EAAAA,UAAU,CAACC,MAAD,EAAiB;AACvB,WAAOrB,QAAQ,CAACU,GAAT,CAAc,UAAD,GAAaW,MAA1B,CAAP;AACH,GAHqB;;AAItBC,EAAAA,SAAS,CAACD,MAAD,EAAiB;AACtB,WAAOrB,QAAQ,CAACU,GAAT,CAAsB,iBAAD,GAAoBW,MAAzC,CAAP;AACH,GANqB;;AAOtBE,EAAAA,YAAY,CAACC,MAAD,EAAiB;AACzB,WAAOxB,QAAQ,CAACyB,GAAT,CAAiC,gBAAjC,EAAkD;AAACD,MAAAA,MAAM,EAAEA;AAAT,KAAlD,CAAP;AACH,GATqB;;AAUtBE,EAAAA,SAAS,CAACC,SAAD,EAAoB;AACzB,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,SAAzB;AACA,WAAO3B,QAAQ,CAACyB,GAAT,CAAmB,eAAnB,EAAmCG,QAAnC,EAA6C;AAChDxB,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADuC,KAA7C,CAAP;AAKH,GAlBqB;;AAmBtB2B,EAAAA,WAAW,CAACC,OAAD,EAA4B;AACnC,WAAOhC,QAAQ,CAACyB,GAAT,CAAsC,SAAtC,EAAgDO,OAAhD,CAAP;AACH;;AArBqB,CAAnB;AA8CP,OAAO,MAAMC,OAAO,GAAG;AACnBC,EAAAA,EAAE,GAAG;AACD,WAAOlC,QAAQ,CAACU,GAAT,CAA8B,SAA9B,CAAP;AACH,GAHkB;;AAInByB,EAAAA,KAAK,CAACC,KAAD,EAAgBC,QAAhB,EAAkCC,UAAlC,EAAuD;AACxD,WAAOtC,QAAQ,CAACkB,IAAT,CAAkC,YAAlC,EAA+C;AAACkB,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KAA/C,CAAP;AACH,GANkB;;AAOnBC,EAAAA,SAAS,GAAG;AACR,WAAOvC,QAAQ,CAACgB,MAAT,CAAwC,YAAxC,CAAP;AACH;;AATkB,CAAhB","sourcesContent":["import axios from \"axios\";\r\nimport {GetTasksResponseType} from \"../Components/Users/UsersContainer\";\r\nimport {PostPropsType} from \"../redux/auth-reducer\";\r\nimport {ProfilePropsType, StatusProfileType} from \"../redux/profilePage-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"0b171657-160a-4f70-93fb-80213f27dfbf\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetTasksResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<LoginAuthResponseType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<PostPropsType>(`follow/${id}`)\r\n        // .then(response => response.data)\r\n    }\r\n}\r\n//\r\ntype GetProfileResponseType = {\r\n    userId: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<StatusProfileType>(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(filePhoto: string) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", filePhoto)\r\n        return instance.put<any>(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfilePropsType) {\r\n        return instance.put<GetProfileResponseType>(`profile`, profile)\r\n    }\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: string\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: string\r\n    }\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type LoginAuthResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`);\r\n    },\r\n    login(email: string, password: number, rememberMe: boolean) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    loginAuth() {\r\n        return instance.delete<LoginAuthResponseType>(`auth/login`)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}