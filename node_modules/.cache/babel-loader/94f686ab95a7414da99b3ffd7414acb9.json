{"ast":null,"code":"import { addPostsActionCreator } from \"../../../redux/profilePage-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport { connect } from \"react-redux\";\n\n// подключили react-redux\nlet mapStateToProps = state => {\n  return {\n    // newPostText: state.profilePage.newPostText,\n    posts: state.profilePage.posts\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    addPosts: newPostText => dispatch(addPostsActionCreator(newPostText))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts); //\n// export default MyPostsContainer;","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/Components/Profile/MyPosts/MyPostsContainer.tsx"],"names":["addPostsActionCreator","MyPosts","connect","mapStateToProps","state","posts","profilePage","mapDispatchToProps","dispatch","addPosts","newPostText"],"mappings":"AACA,SAAQA,qBAAR,QAAoC,oCAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AA6CA;AACA,IAAIC,eAAe,GAAIC,KAAD,IAAiD;AACnE,SAAO;AACH;AACAC,IAAAA,KAAK,EAAED,KAAK,CAACE,WAAN,CAAkBD;AAFtB,GAAP;AAIH,CALD;;AAMA,IAAIE,kBAAkB,GAAIC,QAAD,IAAgD;AACrE,SAAO;AACHC,IAAAA,QAAQ,EAAGC,WAAD,IAAyBF,QAAQ,CAACR,qBAAqB,CAACU,WAAD,CAAtB;AADxC,GAAP;AAGH,CAJD;;AAOA,eAAeR,OAAO,CAACC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CN,OAA7C,CAAf,C,CACA;AACA","sourcesContent":["import React from \"react\";\r\nimport {addPostsActionCreator} from \"../../../redux/profilePage-reducer\";\r\nimport MyPosts from \"./MyPosts\"\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../../redux/Redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostsType} from \"../../../redux/store\";\r\n\r\n//самодельный контейнер\r\n// type MyPostsType = {\r\n//     store: StoreType\r\n// }\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//                 let state = store.getState()\r\n//                 let addPosts = () => {\r\n//                     store.dispatch(addPostsActionCreator());\r\n//                 }\r\n//                 let onPostChange = (text: string) => {\r\n//                     let action = onPostChangeActionCreator(text)\r\n//                     store.dispatch(action)\r\n//                 }\r\n//                 return (\r\n//                     <MyPosts\r\n//                         onPostChangeActionCreator={onPostChange}\r\n//                         addPosts={addPosts}\r\n//                         posts={state.profilePage.posts}\r\n//                         newPostText={state.profilePage.newPostText}\r\n//                     />\r\n//                 )\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPosts: (newPostText: string) => void\r\n\r\n}\r\nexport type MyPostsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\n// подключили react-redux\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        // newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPosts: (newPostText: string) => dispatch(addPostsActionCreator(newPostText))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n//\r\n// export default MyPostsContainer;"]},"metadata":{},"sourceType":"module"}