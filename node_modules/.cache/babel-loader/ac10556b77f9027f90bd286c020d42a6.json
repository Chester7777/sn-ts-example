{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\reactProject\\\\sn-ts-example\\\\src\\\\Components\\\\HOC\\\\WithAuthRedirect.tsx\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet mapStateToPropsForRedirect = state => ({\n  isAuth: state.auth.isAuth\n});\n\nexport function withAuthRedirect(Component) {\n  class RedirectComponent extends React.Component {\n    render() {\n      let {\n        isAuth,\n        ...restProps\n      } = this.props;\n      if (isAuth !== true) return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 41\n      }, this); //можно так\n      // if(!this.props.isAuth) return  <Redirect to=\"/login\" />\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...restProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 20\n      }, this);\n    }\n\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n}","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/Components/HOC/WithAuthRedirect.tsx"],"names":["React","Redirect","connect","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","render","restProps","props","ConnectedAuthRedirectComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA,SAAQC,OAAR,QAAsB,aAAtB;;;AAKA,IAAIC,0BAA0B,GAAIC,KAAD,KAAkD;AAC/EC,EAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;AAD4D,CAAlD,CAAjC;;AAGA,OAAO,SAASE,gBAAT,CAA+BC,SAA/B,EAAkE;AACrE,QAAMC,iBAAN,SAAgCT,KAAK,CAACQ,SAAtC,CAAqE;AACjEE,IAAAA,MAAM,GAAG;AACL,UAAI;AAACL,QAAAA,MAAD;AAAS,WAAGM;AAAZ,UAAyB,KAAKC,KAAlC;AACA,UAAIP,MAAM,KAAK,IAAf,EAAqB,oBAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP,CAFhB,CAGL;AACA;;AACA,0BAAO,QAAC,SAAD,OAAeM;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAPgE;;AAUrE,MAAIE,8BAA8B,GAAGX,OAAO,CAACC,0BAAD,CAAP,CAAqCM,iBAArC,CAArC;AAEA,SAAOI,8BAAP;AACH","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: AllAppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport function withAuthRedirect  <T>(Component: React.ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStateToPropsType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (isAuth !== true) return <Redirect to=\"/login\"/>\r\n            //можно так\r\n            // if(!this.props.isAuth) return  <Redirect to=\"/login\" />\r\n            return <Component {...restProps as T} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}"]},"metadata":{},"sourceType":"module"}