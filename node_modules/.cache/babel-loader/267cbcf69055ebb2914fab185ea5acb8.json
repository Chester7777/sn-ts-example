{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\reactProject\\\\sn-ts-example\\\\src\\\\Components\\\\Profile\\\\ProfileContainer.tsx\";\nimport React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { getStatus, getUserProfile, updateStatus } from \"../../redux/profilePage-reducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// React.ComponentClass<Pick<PropsType, \"profile\" | \"getUserProfile\">, any> & WithRouterStatics<typeof ProfileContainer>\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n\n    this.props.getUserProfile(+userId);\n    this.props.getStatus(+userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Profile, { ...this.props,\n        isOwner: !this.props.match.params.userId,\n        profile: this.props.profile,\n        status: this.props.status,\n        updateStatus: this.props.updateStatus,\n        savePhoto: this.props.savePhoto\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n}); //обертка compose\n\n\nexport default compose(connect(mapStateToProps, {\n  getUserProfile,\n  getStatus,\n  updateStatus,\n  savePhoto\n}), withRouter // withAuthRedirect\n)(ProfileContainer); //HOC создает контейненрную компаненту вокруг ProfileContainer\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\n//передает компаненте данные из URL\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n//передает в компаненту данные из store\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/Components/Profile/ProfileContainer.tsx"],"names":["React","Profile","connect","getStatus","getUserProfile","updateStatus","withRouter","compose","ProfileContainer","Component","refreshProfile","userId","props","match","params","authorizedUserId","history","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","profile","status","savePhoto","mapStateToProps","state","profilePage","auth","isAuth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,EAAmBC,cAAnB,EAAqDC,YAArD,QAAwE,iCAAxE;AACA,SAA6BC,UAA7B,QAA8C,kBAA9C;AAEA,SAAQC,OAAR,QAAsB,OAAtB;;;AAkBA;AAGA,MAAMC,gBAAN,SAA+BR,KAAK,CAACS,SAArC,CAA0D;AAEtDC,EAAAA,cAAc,GAAG;AACb,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAArC;;AAEA,QAAI,CAACA,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,KAAKC,KAAL,CAAWG,gBAApB;;AACA,UAAI,CAACJ,MAAL,EAAa;AACT,aAAKC,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ;;AACD,SAAKL,KAAL,CAAWR,cAAX,CAA0B,CAACO,MAA3B;AACA,SAAKC,KAAL,CAAWT,SAAX,CAAqB,CAACQ,MAAtB;AACH;;AAEDO,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,cAAL;AACH;;AAEDS,EAAAA,kBAAkB,CAACC,SAAD,EAAiCC,SAAjC,EAA0DC,QAA1D,EAA0E;AACxF,QAAI,KAAKV,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAAxB,IAAkCS,SAAS,CAACP,KAAV,CAAgBC,MAAhB,CAAuBH,MAA7D,EAAqE;AACjE,WAAKD,cAAL;AACH;AACJ;;AAEDa,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI,QAAC,OAAD,OACQ,KAAKX,KADb;AAEI,QAAA,OAAO,EAAE,CAAC,KAAKA,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAFtC;AAGI,QAAA,OAAO,EAAE,KAAKC,KAAL,CAAWY,OAHxB;AAII,QAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWa,MAJvB;AAKI,QAAA,YAAY,EAAE,KAAKb,KAAL,CAAWP,YAL7B;AAMI,QAAA,SAAS,EAAE,KAAKO,KAAL,CAAWc;AAN1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AAtCqD;;AA0C1D,IAAIC,eAAe,GAAIC,KAAD,KAAgD;AAClEJ,EAAAA,OAAO,EAAEI,KAAK,CAACC,WAAN,CAAkBL,OADuC;AAElEC,EAAAA,MAAM,EAAEG,KAAK,CAACC,WAAN,CAAkBJ,MAFwC;AAGlEV,EAAAA,gBAAgB,EAAEa,KAAK,CAACE,IAAN,CAAWnB,MAHqC;AAIlEoB,EAAAA,MAAM,EAAEH,KAAK,CAACE,IAAN,CAAWC;AAJ+C,CAAhD,CAAtB,C,CAOA;;;AACA,eAAexB,OAAO,CAClBL,OAAO,CAACyB,eAAD,EAAkB;AAACvB,EAAAA,cAAD;AAAiBD,EAAAA,SAAjB;AAA4BE,EAAAA,YAA5B;AAA0CqB,EAAAA;AAA1C,CAAlB,CADW,EAElBpB,UAFkB,CAGlB;AAHkB,CAAP,CAIbE,gBAJa,CAAf,C,CAMA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfilePropsType, updateStatus} from \"../../redux/profilePage-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    authorizedUserId: string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & MapStatePropsType & MapDispatchPropsType\r\n\r\n// React.ComponentClass<Pick<PropsType, \"profile\" | \"getUserProfile\">, any> & WithRouterStatics<typeof ProfileContainer>\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(+userId);\r\n        this.props.getStatus(+userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AllAppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n//обертка compose\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n//HOC создает контейненрную компаненту вокруг ProfileContainer\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n//передает компаненте данные из URL\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n//передает в компаненту данные из store\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);"]},"metadata":{},"sourceType":"module"}