{"ast":null,"code":"import { usersAPI } from \"../API/API\";\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USER = \"SET_USER\";\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\nconst SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\";\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\n// обьект initialState задает начальное значение state, если он не придет сразу\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n}; // обьект initialState задает начальное значение state, если он не придет сразу\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        //users: [...state.users],\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        // users: [...state.users]\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USER:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USER,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_COUNT,\n  count: totalUsersCount\n});\nexport const setIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const setIsFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\n// type ThunkType = ThunkAction<void, AllAppStateType, unknown, ActionType>\nexport const requestUsersThunkCreator = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(setIsFetching(true));\n    dispatch(setCurrentPage(page));\n    let data = await usersAPI.getUsers(page, pageSize);\n    dispatch(setIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n  };\n};\n\nconst followUnfollowFlow = () => {};\n\nexport const follow = userId => {\n  return async dispatch => {\n    dispatch(setIsFollowingProgress(true, userId));\n    let data = await usersAPI.follow(userId);\n\n    if (data.data.resultCode == 0) {\n      dispatch(followSuccess(userId));\n    }\n\n    dispatch(setIsFollowingProgress(false, userId));\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    dispatch(setIsFollowingProgress(true, userId));\n    let data = await usersAPI.unfollow(userId);\n\n    if (data.data.resultCode == 0) {\n      dispatch(unfollowSuccess(userId));\n    }\n\n    dispatch(setIsFollowingProgress(false, userId));\n  };\n}; //refactoring ублирования кода\n// export const follow = (userId: number) => {\n//     return async (dispatch: Dispatch) => {\n//         dispatch(setIsFollowingProgress(true, userId));\n//         let data = await usersAPI.follow(userId);\n//         if (data.data.resultCode == 0) {\n//             dispatch(followSuccess(userId))\n//         }\n//         dispatch(setIsFollowingProgress(false, userId));\n//     }\n// }\n// export const unfollow = (userId: number) => {\n//     return async (dispatch: Dispatch) => {\n//         dispatch(setIsFollowingProgress(true, userId));\n//         let data = await usersAPI.unfollow(userId);\n//         if (data.data.resultCode == 0) {\n//             dispatch(unfollowSuccess(userId))\n//         }\n//         dispatch(setIsFollowingProgress(false, userId));\n//     }\n// }","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/redux/users-reducer.ts"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USER","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","setIsFetching","setIsFollowingProgress","requestUsersThunkCreator","page","dispatch","data","getUsers","items","totalCount","followUnfollowFlow","follow","resultCode","unfollow"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../API/API\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USER = \"SET_USER\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_COUNT = \"SET_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersType = {\r\n    \"name\": string\r\n    \"id\": number\r\n    \"uniqueUrlName\": string | null\r\n    \"photos\": {\r\n        \"small\": string | null\r\n        \"large\": string | null\r\n    },\r\n    \"status\": string | null\r\n    \"followed\": boolean\r\n}\r\n\r\n\r\ntype CountryType = {\r\n    country: string\r\n    citi: string\r\n}\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n// обьект initialState задает начальное значение state, если он не придет сразу\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                //users: [...state.users],\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users]\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USER: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USER, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const setIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching, userId\r\n} as const)\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof setIsFetching> |\r\n    ReturnType<typeof setIsFollowingProgress>\r\n\r\n\r\nexport type GetUsersThunkCreatorType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalCount: number\r\n}\r\n\r\n// type ThunkType = ThunkAction<void, AllAppStateType, unknown, ActionType>\r\nexport const requestUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(setIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = () => {\r\n\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(setIsFollowingProgress(true, userId));\r\n        let data = await usersAPI.follow(userId);\r\n        if (data.data.resultCode == 0) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n        dispatch(setIsFollowingProgress(false, userId));\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(setIsFollowingProgress(true, userId));\r\n        let data = await usersAPI.unfollow(userId);\r\n        if (data.data.resultCode == 0) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n        dispatch(setIsFollowingProgress(false, userId));\r\n    }\r\n}\r\n\r\n\r\n//refactoring ублирования кода\r\n// export const follow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.follow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(followSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }\r\n// export const unfollow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(setIsFollowingProgress(true, userId));\r\n//         let data = await usersAPI.unfollow(userId);\r\n//         if (data.data.resultCode == 0) {\r\n//             dispatch(unfollowSuccess(userId))\r\n//         }\r\n//         dispatch(setIsFollowingProgress(false, userId));\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}