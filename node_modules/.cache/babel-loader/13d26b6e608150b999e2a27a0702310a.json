{"ast":null,"code":"import{addMessagesActionCreator}from\"../../redux/dialogsPage-reducer\";import Dialogs from\"./Dialogs\";import{connect}from\"react-redux\";import{compose}from\"redux\";import{withAuthRedirect}from\"../HOC/WithAuthRedirect\";//самодельный контейнер\n// type PropsType = {\n//     store: StoreType\n// }\n// const DialogsContainer = () => {\n//     return (\n//         <StoreContext.Consumer>\n//             {\n//                 (store) => {\n//                     let state = store.getState().dialogsPage\n//                     let addMessages = () => {\n//                         store.dispatch(addMessagesActionCreator());\n//                     }\n//                     let onMessageChange = (body: string) => {\n//                         store.dispatch(onMessageChangeActionCreator(body));\n//                     }\n//                     return (\n//                         <Dialogs addMessages={addMessages} onMessageChange={onMessageChange} dialogsPage={state}/>\n//                     )\n//                 }\n//             }\n//         </StoreContext.Consumer>\n//\n//     )\n// }\n// подключили react-redux\nvar mapStateToProps=function mapStateToProps(state){return{dialogsPage:state.dialogsPage,isAuth:state.auth.isAuth// newMessageText: state.newMessageText\n// newMessageText: state.dialogsPage.messages\n};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{addMessages:function addMessages(newMessageText){return dispatch(addMessagesActionCreator(newMessageText));}// onMessageChange: (body: string) => dispatch(onMessageChangeActionCreator(body))\n};};export default compose(connect(mapStateToProps,mapDispatchToProps),withAuthRedirect)(Dialogs);//HOC создает контейненрную компаненту вокруг ProfileContainer\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\n//\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n//\n// export default DialogsContainer;","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/Components/Dialogs/DialogsContainer.tsx"],"names":["addMessagesActionCreator","Dialogs","connect","compose","withAuthRedirect","mapStateToProps","state","dialogsPage","isAuth","auth","mapDispatchToProps","dispatch","addMessages","newMessageText"],"mappings":"AACA,OAAQA,wBAAR,KAAwD,iCAAxD,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,OAAQC,OAAR,KAAsB,aAAtB,CAEA,OAAQC,OAAR,KAAgC,OAAhC,CACA,OAAQC,gBAAR,KAA+B,yBAA/B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA,GAAIC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAiD,CACnE,MAAO,CACHC,WAAW,CAAED,KAAK,CAACC,WADhB,CAEHC,MAAM,CAAEF,KAAK,CAACG,IAAN,CAAWD,MACnB;AACA;AAJG,CAAP,CAMH,CAPD,CAQA,GAAIE,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAgD,CACrE,MAAO,CACHC,WAAW,CAAE,qBAACC,cAAD,QAA4BF,CAAAA,QAAQ,CAACX,wBAAwB,CAACa,cAAD,CAAzB,CAApC,EACb;AAFG,CAAP,CAIH,CALD,CAOA,cAAeV,CAAAA,OAAO,CAClBD,OAAO,CAACG,eAAD,CAAkBK,kBAAlB,CADW,CAElBN,gBAFkB,CAAP,CAGbH,OAHa,CAAf,CAKA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport {addMessagesActionCreator, DialogsPageType} from \"../../redux/dialogsPage-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../HOC/WithAuthRedirect\";\r\n\r\n//самодельный контейнер\r\n// type PropsType = {\r\n//     store: StoreType\r\n// }\r\n// const DialogsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState().dialogsPage\r\n//                     let addMessages = () => {\r\n//                         store.dispatch(addMessagesActionCreator());\r\n//                     }\r\n//                     let onMessageChange = (body: string) => {\r\n//                         store.dispatch(onMessageChangeActionCreator(body));\r\n//                     }\r\n//                     return (\r\n//                         <Dialogs addMessages={addMessages} onMessageChange={onMessageChange} dialogsPage={state}/>\r\n//                     )\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//\r\n//     )\r\n// }\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addMessages: (newMessageText: string) => void\r\n    // onMessageChange: (body: string) => void\r\n\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\n// подключили react-redux\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n        // newMessageText: state.newMessageText\r\n        // newMessageText: state.dialogsPage.messages\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addMessages: (newMessageText: string) => dispatch(addMessagesActionCreator(newMessageText)),\r\n        // onMessageChange: (body: string) => dispatch(onMessageChangeActionCreator(body))\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n//HOC создает контейненрную компаненту вокруг ProfileContainer\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n//\r\n// export default DialogsContainer;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}