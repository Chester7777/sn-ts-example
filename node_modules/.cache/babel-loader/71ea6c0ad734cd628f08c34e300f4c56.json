{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\reactProject\\\\sn-ts-example\\\\src\\\\Components\\\\Users\\\\UsersContainer.tsx\";\nimport { connect } from \"react-redux\";\nimport { follow, requestUsersThunkCreator, setCurrentPage, setIsFollowingProgress, unfollow } from \"../../redux/users-reducer\";\nimport React from \"react\";\nimport Users from \"./Users\";\nimport Preloader from \"../Common/Preloader/Preloader\";\nimport { compose } from \"redux\";\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getPortionSize, getTotalUsersCount, getUsers } from \"../../redux/users-selectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// export type OnPageChangedType = {\n//     onPageChanged: (pageNumber: number) => void\n// }\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      const {\n        pageSize\n      } = this.props;\n      this.props.getUsers(pageNumber, pageSize);\n    };\n  }\n\n  //подключаем thunkCreator (санки)\n  componentDidMount() {\n    const {\n      currentPage,\n      pageSize\n    } = this.props;\n    this.props.getUsers(currentPage, pageSize);\n  } // componentDidMount() {\n  //     this.props.setIsFetching(true)\n  //     usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n  //         this.props.setIsFetching(false)\n  //         this.props.setUsers(data.items)\n  //         this.props.setTotalUsersCount(data.totalCount)\n  //     })\n  // }\n  //подключаем thunkCreator (санки)\n\n\n  // onPageChanged = (pageNumber: number) => {\n  //     this.props.setCurrentPage(pageNumber);\n  //     this.props.setIsFetching(true)\n  //     usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\n  //         this.props.setIsFetching(false)\n  //         this.props.setUsers(data.items)\n  //     })\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalItemsCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        users: this.props.users,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        followingInProgress: this.props.followingInProgress,\n        portionSize: this.props.portionSize // setIsFollowingProgress={this.props.setIsFollowingProgress}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n} //refactoring\n// let mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\n//     return {\n//         users: state.usersPage.users,\n//         pageSize: state.usersPage.pageSize,\n//         totalUsersCount: state.usersPage.totalUsersCount,\n//         currentPage: state.usersPage.currentPage,\n//         isFetching: state.usersPage.isFetching,\n//         followingInProgress: state.usersPage.followingInProgress\n//     }\n// }\n\n\nlet mapStateToProps = state => {\n  return {\n    users: getUsers(state),\n    pageSize: getPageSize(state),\n    totalUsersCount: getTotalUsersCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n    portionSize: getPortionSize(state)\n  };\n}; // let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n//\n//     return {\n//         follow: (userId: number) => {\n//             dispatch(followAC(userId))\n//         },\n//         unfollow: (userId: number) => {\n//             dispatch(unfollowAC(userId))\n//         },\n//         setUsers: (users: Array<UsersType>) => {\n//             dispatch(setUserAC(users))\n//         },\n//         setCurrentPage: (pageNumber: number) => {\n//             dispatch(setCurrentPageAC(pageNumber))\n//         },\n//         setTotalUsersCount: (totalCount: number) => {\n//             dispatch(setUsersTotalCountAC(totalCount))\n//         },\n//         setIsFetching: (isFetching: boolean) => {\n//             dispatch(setIsFetchingAC(isFetching))\n//         }\n//     }\n// }\n\n\nexport default compose(connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setCurrentPage,\n  setIsFollowingProgress,\n  getUsers: requestUsersThunkCreator\n}))(UsersContainer); // let withRedirectComponent = withAuthRedirect(UsersContainer)\n//\n// export default connect(mapStateToProps,\n//     {\n//         follow,\n//         unfollow,\n//         // setUsers,\n//         setCurrentPage,\n//         // setTotalUsersCount,\n//         // setIsFetching,\n//         setIsFollowingProgress,\n//         getUsers: getUsersThunkCreator\n//     })(withRedirectComponent);","map":{"version":3,"sources":["C:/React/reactProject/sn-ts-example/src/Components/Users/UsersContainer.tsx"],"names":["connect","follow","requestUsersThunkCreator","setCurrentPage","setIsFollowingProgress","unfollow","React","Users","Preloader","compose","getCurrentPage","getFollowingInProgress","getIsFetching","getPageSize","getPortionSize","getTotalUsersCount","getUsers","UsersContainer","Component","onPageChanged","pageNumber","pageSize","props","componentDidMount","currentPage","render","isFetching","totalUsersCount","users","followingInProgress","portionSize","mapStateToProps","state"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\r\nimport {AllAppStateType} from \"../../redux/Redux-store\";\r\nimport {\r\n    follow,\r\n    requestUsersThunkCreator,\r\n    setCurrentPage,\r\n    setIsFollowingProgress,\r\n    unfollow,\r\n    UsersType\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize, getPortionSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\nimport {Paginator} from \"../Common/Paginator/Paginator\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    // setUsers: (users: Array<UsersType>) => void\r\n    // setTotalUsersCount: (totalCount: number) => void\r\n    // setIsFetching: (isFetching: boolean) => void\r\n\r\n\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & mapDispatchToPropsType;\r\n\r\nexport type GetTasksResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n// export type OnPageChangedType = {\r\n//     onPageChanged: (pageNumber: number) => void\r\n// }\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    //подключаем thunkCreator (санки)\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //         this.props.setTotalUsersCount(data.totalCount)\r\n    //     })\r\n    // }\r\n\r\n    //подключаем thunkCreator (санки)\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n    // onPageChanged = (pageNumber: number) => {\r\n    //     this.props.setCurrentPage(pageNumber);\r\n    //     this.props.setIsFetching(true)\r\n    //     usersAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n    //         this.props.setIsFetching(false)\r\n    //         this.props.setUsers(data.items)\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            {/*<Paginator />*/}\r\n            <Users\r\n                totalItemsCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                portionSize={this.props.portionSize}\r\n                // setIsFollowingProgress={this.props.setIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n//refactoring\r\n// let mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionSize: getPortionSize(state)\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n//\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UsersType>) => {\r\n//             dispatch(setUserAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//         setIsFetching: (isFetching: boolean) => {\r\n//             dispatch(setIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        setIsFollowingProgress,\r\n        getUsers: requestUsersThunkCreator\r\n    })\r\n)(UsersContainer);\r\n// let withRedirectComponent = withAuthRedirect(UsersContainer)\r\n//\r\n// export default connect(mapStateToProps,\r\n//     {\r\n//         follow,\r\n//         unfollow,\r\n//         // setUsers,\r\n//         setCurrentPage,\r\n//         // setTotalUsersCount,\r\n//         // setIsFetching,\r\n//         setIsFollowingProgress,\r\n//         getUsers: getUsersThunkCreator\r\n//     })(withRedirectComponent);"]},"metadata":{},"sourceType":"module"}